{
  "version": 3,
  "sources": ["../../src/provider/roochProvider.tsx", "../../src/provider/clientProvider.tsx", "../../src/hooks/useSessionsStore.ts", "../../src/http/httpTransport.ts", "../../src/provider/sessionStore.ts", "../../src/utils/stateStorage.ts", "../../src/wellet/wallet.ts", "../../src/wellet/bitcoin.ts", "../../src/wellet/unisat.ts", "../../src/wellet/okx.ts", "../../src/wellet/onekey.ts", "../../src/utils/walletUtils.ts", "../../src/provider/walletProvider.tsx", "../../src/provider/walletStore.ts", "../../src/hooks/client/useCurrentNetwork.ts", "../../src/hooks/client/useRoochContext.ts", "../../src/hooks/client/useRoochClient.ts", "../../src/hooks/client/useRoochClientQuery.ts", "../../src/hooks/client/useSwitchNetwork.ts", "../../src/constants/roochMutationKeys.ts", "../../src/constants/walletMutationKeys.ts", "../../src/hooks/client/useTransferObject.ts", "../../src/hooks/client/useTransferCoin.ts", "../../src/hooks/useCurrentSession.ts", "../../src/hooks/client/networks-config.ts", "../../src/hooks/client/useSignAndExecuteTransaction.ts", "../../src/hooks/wallet/useWalletStore.ts", "../../src/hooks/wallet/useAddresses.ts", "../../src/hooks/wallet/useAutoConnectWallet.ts", "../../src/hooks/wallet/useConnectWallet.ts", "../../src/hooks/useSessions.ts", "../../src/hooks/wallet/useCurrentAccount.ts", "../../src/hooks/wallet/useCurrentWallet.ts", "../../src/hooks/wallet/useWalletCreateSession.ts", "../../src/error/walletErrors.ts", "../../src/hooks/wallet/useWallets.ts", "../../src/hooks/wallet/useWalletChanged.ts", "../../src/wellet/wallets.ts", "../../src/wellet/util.ts", "../../src/hooks/useRemoveSession.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { ReactNode } from 'react'\nimport { createContext, useRef } from 'react'\n\nimport { NetworkConfigs, RoochClientProvider } from './clientProvider.js'\nimport { createSessionStore, SessionStore } from './sessionStore.js'\nimport { getDefaultStorage, StorageType } from '../utils/index.js'\n\nconst DEFAULT_SESSION_STORAGE_KEY = function (_?: string) {\n  return 'rooch-sdk-kit:rooch-session-info'\n}\n\nexport const RoochContext = createContext<SessionStore | null>(null)\n\nexport type RoochProviderProps<T extends NetworkConfigs> = {\n  networks?: NetworkConfigs\n  onNetworkChange?: (network: keyof T & string) => void\n\n  children: ReactNode\n} & (\n  | {\n      defaultNetwork?: keyof T & string\n      network?: never\n    }\n  | {\n      defaultNetwork?: never\n      network?: keyof T & string\n    }\n)\n\nexport function RoochProvider<T extends NetworkConfigs>(props: RoochProviderProps<T>) {\n  // ** Props **\n  const { children, networks, defaultNetwork } = props\n\n  const storeRef = useRef(\n    createSessionStore({\n      storage: getDefaultStorage(StorageType.Local),\n      storageKey: DEFAULT_SESSION_STORAGE_KEY(),\n    }),\n  )\n  return (\n    <RoochContext.Provider value={storeRef.current}>\n      <RoochClientProvider networks={networks} defaultNetwork={defaultNetwork}>\n        {children}\n      </RoochClientProvider>\n    </RoochContext.Provider>\n  )\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ReactNode, useCallback } from 'react'\n\nimport { createContext, useMemo, useState } from 'react'\n\nimport {\n  getRoochNodeUrl,\n  isRoochClient,\n  RoochClient,\n  RoochClientOptions,\n} from '@roochnetwork/rooch-sdk'\n\nimport { NetworkConfig } from '../hooks/index.js'\nimport { useSessionStore } from '../hooks/useSessionsStore.js'\nimport { HTTPTransport } from '../http/httpTransport.js'\n\nexport type NetworkConfigs<T extends NetworkConfig | RoochClient = NetworkConfig | RoochClient> =\n  Record<string, T>\n\nexport interface ClientProviderContext {\n  client: RoochClient\n  networks: NetworkConfigs\n  network: string\n  config: NetworkConfig | null\n  selectNetwork: (network: string) => void\n}\n\nexport const ClientContext = createContext<ClientProviderContext | null>(null)\n\nexport type RoochClientProviderProps<T extends NetworkConfigs> = {\n  networks?: NetworkConfigs\n  onNetworkChange?: (network: keyof T & string) => void\n  children: ReactNode\n} & (\n  | {\n      defaultNetwork?: keyof T & string\n      network?: never\n    }\n  | {\n      defaultNetwork?: never\n      network?: keyof T & string\n    }\n)\n\nconst DEFAULT_NETWORKS = {\n  localnet: { url: getRoochNodeUrl('localnet') },\n}\n\nconst DEFAULT_CREATE_CLIENT = function createClient(\n  _name: string,\n  config: NetworkConfig | RoochClient,\n  setCurrentSession: any,\n) {\n  if (isRoochClient(config)) {\n    return config\n  }\n\n  config.transport = new HTTPTransport(\n    {\n      url: config.url!.toString(),\n    },\n    setCurrentSession,\n  )\n\n  return new RoochClient(config)\n}\n\nexport function RoochClientProvider<T extends NetworkConfigs>(props: RoochClientProviderProps<T>) {\n  const { onNetworkChange, network, children } = props\n  const setCurrentSession = useSessionStore((state) => state.setCurrentSession)\n  const networks = (props.networks ?? DEFAULT_NETWORKS) as T\n  const [selectedNetwork, setSelectedNetwork] = useState<keyof T & string>(\n    props.network ?? props.defaultNetwork ?? (Object.keys(networks)[0] as keyof T & string),\n  )\n  const currentNetwork = props.network ?? selectedNetwork\n\n  const clearSession = useCallback(() => {\n    try {\n      setCurrentSession(undefined)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [setCurrentSession])\n\n  const client = useMemo(() => {\n    return DEFAULT_CREATE_CLIENT(currentNetwork, networks[currentNetwork], () => {\n      clearSession()\n    })\n  }, [currentNetwork, networks, clearSession])\n\n  const ctx = useMemo((): ClientProviderContext => {\n    return {\n      client,\n      network: currentNetwork,\n      networks,\n      config:\n        networks[currentNetwork] instanceof RoochClient\n          ? null\n          : (networks[currentNetwork] as RoochClientOptions),\n      selectNetwork: (newNetwork) => {\n        if (currentNetwork === newNetwork) {\n          return\n        }\n\n        if (!network && newNetwork !== selectedNetwork) {\n          setSelectedNetwork(newNetwork)\n        }\n\n        onNetworkChange?.(newNetwork)\n      },\n    }\n  }, [client, currentNetwork, networks, network, selectedNetwork, onNetworkChange])\n\n  return <ClientContext.Provider value={ctx}>{children}</ClientContext.Provider>\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useContext } from 'react'\nimport { useStore } from 'zustand'\n\nimport { SessionStoreState } from '../provider/sessionStore.js'\nimport { RoochContext } from '../provider/index.js'\n\nexport function useSessionStore<T>(selector: (state: SessionStoreState) => T): T {\n  const store = useContext(RoochContext)\n  if (!store) {\n    throw new Error(\n      'Could not find RoochSessionContext. Ensure that you have set up the RoochClientProvider.',\n    )\n  }\n  return useStore(store, selector)\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  RoochHTTPTransport,\n  RoochTransportRequestOptions,\n  RoochHTTPTransportOptions,\n  ErrorValidateInvalidAccountAuthKey,\n  ErrorValidateSessionIsExpired,\n} from '@roochnetwork/rooch-sdk'\n\ntype SessionExpiredCallbackType = () => void\n\nexport class HTTPTransport extends RoochHTTPTransport {\n  private readonly sessionExpiredCallback: SessionExpiredCallbackType\n\n  constructor(\n    options: RoochHTTPTransportOptions,\n    sessionExpiredCallback: SessionExpiredCallbackType,\n  ) {\n    super(options)\n    this.sessionExpiredCallback = sessionExpiredCallback\n  }\n\n  async request<T>(input: RoochTransportRequestOptions): Promise<T> {\n    let result: T\n    try {\n      result = await super.request(input)\n      return result\n    } catch (e: any) {\n      if (\n        'code' in e &&\n        (e.code === ErrorValidateInvalidAccountAuthKey || e.code === ErrorValidateSessionIsExpired)\n      ) {\n        this.sessionExpiredCallback()\n      }\n      throw e\n    }\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { createStore } from 'zustand'\nimport { createJSONStorage, persist, StateStorage } from 'zustand/middleware'\nimport { Session } from '@roochnetwork/rooch-sdk'\n\nexport type SessionActions = {\n  addSession: (session: Session) => void\n  setCurrentSession: (session?: Session) => void\n  removeSession: (session: Session) => void\n}\n\nexport type SessionStoreState = {\n  sessions: Session[]\n  currentSession: Session | null\n} & SessionActions\n\nexport type SessionStore = ReturnType<typeof createSessionStore>\n\ntype ClientConfiguration = {\n  storage: StateStorage\n  storageKey: string\n}\n\nexport function createSessionStore({ storage, storageKey }: ClientConfiguration) {\n  return createStore<SessionStoreState>()(\n    persist(\n      (set, get) => ({\n        sessions: [],\n        currentSession: null,\n        addSession(session) {\n          const cache = get().sessions\n          cache.push(session)\n          set(() => ({\n            sessions: cache,\n          }))\n        },\n        setCurrentSession(session) {\n          if (!session) {\n            set(() => ({\n              currentSession: null,\n            }))\n          } else {\n            const cache = get().sessions\n            if (!cache.find((item) => item.getAuthKey() === session.getAuthKey())) {\n              cache.push(session)\n            }\n            set(() => ({\n              currentSession: session,\n              sessions: cache,\n            }))\n          }\n        },\n        removeSession(session) {\n          const cacheSessions = get().sessions\n          const cacheCurSession = get().currentSession\n          set(() => ({\n            currentSession:\n              cacheCurSession?.getAuthKey() === session.getAuthKey() ? null : cacheCurSession,\n            sessions: cacheSessions.filter((c) => c.getAuthKey() !== session.getAuthKey()),\n          }))\n        },\n      }),\n      {\n        name: storageKey,\n        storage: createJSONStorage(() => storage, {\n          reviver: (key, value) => {\n            if (key === 'sessions') {\n              return (value as any[]).map((session: any) => Session.fromJson(session))\n            }\n            return value\n          },\n        }),\n        partialize: ({ sessions }) => ({\n          sessions,\n        }),\n      },\n    ),\n  )\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { StateStorage } from 'zustand/middleware'\n\nexport function createInMemoryStore(): StateStorage {\n  const store = new Map()\n  return {\n    getItem(key: string) {\n      return store.get(key)\n    },\n    setItem(key: string, value: string) {\n      store.set(key, value)\n    },\n    removeItem(key: string) {\n      store.delete(key)\n    },\n  }\n}\n\nexport enum StorageType {\n  Session,\n  Local,\n}\n\nexport function getDefaultStorage(type?: StorageType): StateStorage {\n  let storage: StateStorage | undefined\n\n  switch (type) {\n    case StorageType.Session:\n      storage = typeof window !== 'undefined' && window.sessionStorage ? sessionStorage : undefined\n      break\n    case StorageType.Local:\n      storage = typeof window !== 'undefined' && window.localStorage ? localStorage : undefined\n  }\n\n  if (!storage) {\n    storage = createInMemoryStore()\n  }\n\n  return storage\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ThirdPartyAddress, Bytes, Signer } from '@roochnetwork/rooch-sdk'\n\nimport { SupportChain } from '../feature/index.js'\n\nexport abstract class Wallet extends Signer {\n  protected address: ThirdPartyAddress[] | undefined\n  protected publicKey: string | undefined\n  protected currentAddress: ThirdPartyAddress | undefined\n\n  /**\n   * Connects the wallet.\n   * @returns A promise that resolves to an array of wallet accounts.\n   */\n  abstract connect(): Promise<ThirdPartyAddress[]>\n\n  abstract getName(): string\n  /**\n   * Signs a message.\n   * @param msg - The message to sign.\n   * @returns A promise that resolves to the signature string.\n   */\n  abstract sign(msg: Bytes): Promise<Bytes>\n\n  /**\n   * Switches the network.\n   */\n  abstract switchNetwork(network: string): void\n\n  /**\n   * Switches the account.\n   * Note: Wallets with Bitcoin chain are not currently supported.\n   */\n  abstract switchAccount(address: string): void\n\n  /**\n   * Retrieves the current network of the wallet.\n   * @returns The current network as a string.\n   */\n  abstract getNetwork(): string\n\n  /**\n   * Retrieves the supported networks of the wallet.\n   * @returns An array of supported network strings.\n   */\n  abstract getSupportNetworks(): string[]\n\n  /**\n   * Registers a callback function to be invoked when accounts are changed.\n   * @param callback - A function to be called when accounts are changed. It receives an array of account strings as its argument.\n   */\n  abstract onAccountsChanged(callback: (accounts: Array<string>) => void): void\n\n  /**\n   * Removes a previously registered callback function for account changes.\n   * @param callback - The callback function to be removed.\n   */\n  abstract removeAccountsChanged(callback: (accounts: Array<string>) => void): void\n\n  /**\n   * Registers a callback function to be invoked when the network is changed.\n   * @param callback - A function to be called when the network is changed. It receives the new network as its argument.\n   */\n  abstract onNetworkChanged(callback: (network: string) => void): void\n\n  /**\n   * Removes a previously registered callback function for network changes.\n   * @param callback - The callback function to be removed.\n   */\n  abstract removeNetworkChanged(callback: (network: string) => void): void\n\n  /**\n   * Retrieves the target of the wallet.\n   * @returns The target of the wallet.\n   */\n  abstract getTarget(): any\n\n  abstract getChain(): SupportChain\n\n  /**\n   * Normalizes the recovery ID.\n   * @param recoveryID - The recovery ID to be normalized.\n   * @returns The normalized recovery ID as a number.\n   */\n  protected abstract normalize_recovery_id(recoveryID: number): number\n\n  /**\n   * Checks if the wallet is installed.\n   * @returns A promise that resolves to true if the wallet is installed, otherwise false.\n   */\n  async checkInstalled(): Promise<boolean> {\n    for (let i = 1; i < 10 && !this.getTarget(); i += 1) {\n      await new Promise((resolve) => setTimeout(resolve, 100 * i))\n    }\n    return Promise.resolve(this.getTarget() !== undefined)\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  Address,\n  Authenticator,\n  BitcoinAddress,\n  BitcoinSignMessage,\n  PublicKey,\n  RoochAddress,\n  Secp256k1PublicKey,\n  SignatureScheme,\n  fromHEX,\n  Transaction,\n} from '@roochnetwork/rooch-sdk'\n\nimport { SupportChain } from '../feature/index.js'\nimport { Wallet } from '../wellet/index.js'\n\nexport abstract class BitcoinWallet extends Wallet {\n  async signTransaction(input: Transaction): Promise<Authenticator> {\n    const message = new BitcoinSignMessage(input.hashData(), input.getInfo() || '')\n    return Authenticator.bitcoin(message, this, 'raw')\n  }\n\n  getPublicKey(): PublicKey<Address> {\n    if (!this.publicKey) {\n      throw Error('Please connect your wallet first')\n    }\n\n    return new Secp256k1PublicKey(fromHEX(this.publicKey))\n  }\n\n  getRoochAddress(): RoochAddress {\n    if (!this.currentAddress) {\n      throw Error('Please connect your wallet first')\n    }\n    return (this.currentAddress as BitcoinAddress).genRoochAddress()\n  }\n\n  getBitcoinAddress(): BitcoinAddress {\n    if (!this.currentAddress) {\n      throw Error('Please connect your wallet first')\n    }\n    return this.currentAddress as BitcoinAddress\n  }\n\n  getKeyScheme(): SignatureScheme {\n    return 'Secp256k1'\n  }\n\n  normalize_recovery_id(v: number) {\n    let normalizeV = v - 27 - 4\n\n    if (normalizeV < 0) {\n      normalizeV = normalizeV + 4\n    }\n\n    return normalizeV\n  }\n\n  switchAccount(): void {\n    throw new Error('Method not implemented.')\n  }\n\n  getChain(): SupportChain {\n    return 'bitcoin'\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BitcoinAddress, Bytes, ThirdPartyAddress, str, bytes } from '@roochnetwork/rooch-sdk'\n\nimport { BitcoinWallet } from '../wellet/index.js'\n\nconst UNISAT_SUPPORT_NETWORKS = ['livenet', 'testnet']\n\nexport class UniSatWallet extends BitcoinWallet {\n  getName(): string {\n    return 'unisat'\n  }\n\n  getTarget(): any {\n    return (window as any).unisat\n  }\n\n  async connect(): Promise<ThirdPartyAddress[]> {\n    let addresses: string[] = await this.getTarget().getAccounts()\n\n    if (!addresses || addresses.length === 0) {\n      await this.getTarget().requestAccounts()\n      return this.connect()\n    }\n\n    let publicKey = await this.getTarget().getPublicKey()\n\n    this.address = addresses.map((item) => new BitcoinAddress(item))\n    this.currentAddress = this.address[0]\n    this.publicKey = publicKey\n\n    return this.address\n  }\n\n  switchNetwork(network: string): void {\n    this.getTarget().switchNetwork(network)\n  }\n  getNetwork(): string {\n    return this.getTarget().getNetwork()\n  }\n\n  getSupportNetworks(): string[] {\n    return UNISAT_SUPPORT_NETWORKS\n  }\n\n  onAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().on('accountsChanged', callback)\n  }\n\n  removeAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().removeListener('accountsChanged', callback)\n  }\n\n  onNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().on('networkChanged', callback)\n  }\n\n  removeNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().removeListener('networkChanged', callback)\n  }\n\n  async sign(msg: Bytes): Promise<Bytes> {\n    const msgStr = str('utf8', msg)\n    const sign = await this.getTarget().signMessage(msgStr)\n    return bytes('base64', sign).subarray(1) // remove recover id\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BitcoinAddress, Bytes, ThirdPartyAddress, str, bytes } from '@roochnetwork/rooch-sdk'\nimport { BitcoinWallet } from '../wellet/index.js'\n\nexport class OkxWallet extends BitcoinWallet {\n  getName(): string {\n    return 'okx'\n  }\n\n  async sign(msg: Bytes): Promise<Bytes> {\n    const msgStr = str('utf8', msg)\n    const sign = await this.getTarget().signMessage(msgStr, {\n      from: this.currentAddress?.toStr(),\n    })\n    return bytes('base64', sign).subarray(1)\n  }\n\n  getTarget(): any {\n    return (window as any).okxwallet?.bitcoin\n  }\n\n  async connect(): Promise<ThirdPartyAddress[]> {\n    const obj = await this.getTarget().connect()\n    this.currentAddress = new BitcoinAddress(obj.address)\n    this.publicKey = obj.compressedPublicKey !== '' ? obj.compressedPublicKey : obj.publicKey\n    this.address = [this.currentAddress]\n\n    return this.address\n  }\n\n  switchNetwork(): void {\n    this.getTarget().switchNetwork()\n  }\n\n  getNetwork(): string {\n    return this.getTarget().getNetwork()\n  }\n\n  getSupportNetworks(): string[] {\n    return ['livenet']\n  }\n\n  onAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().on('accountsChanged', callback)\n  }\n\n  removeAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().removeListener('accountsChanged', callback)\n  }\n\n  onNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().on('networkChanged', callback)\n  }\n\n  removeNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().removeListener('networkChanged', callback)\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BitcoinAddress, Bytes, ThirdPartyAddress, str, bytes } from '@roochnetwork/rooch-sdk'\nimport { BitcoinWallet } from '../wellet/index.js'\n\nexport class OnekeyWallet extends BitcoinWallet {\n  getName(): string {\n    return 'onekey'\n  }\n\n  async sign(msg: Bytes): Promise<Bytes> {\n    const msgStr = str('utf8', msg)\n    const sign = await this.getTarget().signMessage(msgStr)\n    return bytes('base64', sign).subarray(1)\n  }\n\n  getTarget(): any {\n    return (window as any).$onekey?.btc\n  }\n\n  async connect(): Promise<ThirdPartyAddress[]> {\n    let addresses: string[] = await this.getTarget().getAccounts()\n\n    if (!addresses || addresses.length === 0) {\n      await this.getTarget().requestAccounts()\n      return this.connect()\n    }\n\n    let publicKey = await this.getTarget().getPublicKey()\n\n    this.address = addresses.map((item) => new BitcoinAddress(item))\n    this.currentAddress = this.address[0]\n    this.publicKey = publicKey\n\n    return this.address\n  }\n\n  switchNetwork(): void {\n    this.getTarget().switchNetwork()\n  }\n\n  getNetwork(): string {\n    return this.getTarget().getNetwork()\n  }\n\n  getSupportNetworks(): string[] {\n    return ['livenet']\n  }\n\n  onAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().on('accountsChanged', callback)\n  }\n\n  removeAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().removeListener('accountsChanged', callback)\n  }\n\n  onNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().on('networkChanged', callback)\n  }\n\n  removeNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().removeListener('networkChanged', callback)\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SupportChain } from '../feature/index.js'\nimport {\n  Wallet,\n  UniSatWallet,\n  // OkxWallet,\n  // OnekeyWallet,\n  // OnekeyHardwareWallet,\n} from '../wellet/index.js'\n\nexport async function checkWallets(filter?: SupportChain) {\n  const wallets: Wallet[] = [\n    new UniSatWallet(),\n    // new OkxWallet(),\n    // new OnekeyWallet(),\n    // new OnekeyHardwareWallet(),\n  ].filter((wallet) => wallet.getChain() === filter || !filter)\n\n  return await Promise.all(wallets.filter(async (w) => await w.checkInstalled()))\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ReactNode, useCallback, createContext, useEffect, useRef } from 'react'\nimport type { StateStorage } from 'zustand/middleware'\nimport { BitcoinAddress, Session } from '@roochnetwork/rooch-sdk'\n\nimport { createWalletStore, WalletStore } from './walletStore.js'\nimport {\n  useAutoConnectWallet,\n  useCurrentSession,\n  useSession,\n  useWalletStore,\n  useCurrentNetwork,\n} from '../hooks/index.js'\nimport { useSessionStore } from '../hooks/useSessionsStore.js'\nimport { getDefaultStorage, StorageType, checkWallets } from '../utils/index.js'\nimport { SupportChain, SupportWallet } from '../feature/index.js'\nimport { getRegisteredWallets } from '../wellet/util.js'\nimport { getWallets } from '../wellet/wallets.js'\nimport { useWalletChanged } from '../hooks/index.js'\n\ntype WalletProviderProps = {\n  preferredWallets?: SupportWallet[]\n\n  chain?: SupportChain\n\n  /** Enables automatically reconnecting to the most recently used wallet account upon mounting. */\n  autoConnect?: boolean\n\n  /** Configures how the most recently connected to wallet account is stored. Defaults to using localStorage. */\n  storage?: StateStorage\n\n  /** The key to use to store the most recently connected wallet account. */\n  storageKey?: string\n\n  children: ReactNode\n}\n\nconst DEFAULT_STORAGE_KEY = 'rooch-sdk-kit:wallet-connect-info'\n\nexport const WalletContext = createContext<WalletStore | null>(null)\n\nexport function WalletProvider({\n  preferredWallets = ['unisat', 'okx'],\n  chain = 'bitcoin',\n  storage,\n  storageKey = DEFAULT_STORAGE_KEY,\n  autoConnect = false,\n  children,\n}: WalletProviderProps) {\n  const network = useCurrentNetwork()\n\n  const storeRef = useRef(\n    createWalletStore({\n      chain,\n      wallets: getRegisteredWallets(preferredWallets, (w) => w.getChain() === chain),\n      currentWallet: undefined,\n      autoConnectEnabled: autoConnect,\n      storage: storage || getDefaultStorage(StorageType.Local),\n      storageKey: storageKey + network + chain?.toString(),\n    }),\n  )\n\n  useEffect(() => {\n    const fetchWallet = async () => {\n      const wallets = await checkWallets(chain)\n      getWallets().register(...wallets)\n    }\n\n    fetchWallet()\n  }, [chain])\n\n  return (\n    <WalletContext.Provider value={storeRef.current}>\n      <WalletConnectionManager preferredWallets={preferredWallets} chain={chain}>\n        {children}\n      </WalletConnectionManager>\n    </WalletContext.Provider>\n  )\n}\n\ntype WalletConnectionManagerProps = Required<\n  Pick<WalletProviderProps, 'children' | 'preferredWallets' | 'chain'>\n>\n\nfunction WalletConnectionManager({ children, preferredWallets }: WalletConnectionManagerProps) {\n  useAutoConnectWallet()\n  useWalletChanged(preferredWallets)\n\n  const connectionStatus = useWalletStore((store) => store.connectionStatus)\n  const currentWallet = useWalletStore((store) => store.currentWallet)\n  const setWalletDisconnected = useWalletStore((store) => store.setWalletDisconnected)\n  const setConnectionStatus = useWalletStore((state) => state.setConnectionStatus)\n  const setAddressSwitched = useWalletStore((store) => store.setAddressSwitched)\n  const currentAddress = useWalletStore((state) => state.currentAddress)\n  const sessions = useSession()\n  const curSession = useCurrentSession()\n  const setCurrentSession = useSessionStore((state) => state.setCurrentSession)\n\n  const accountsChangedHandler = useCallback(\n    async (address: string[]) => {\n      if (address.length === 0) {\n        setWalletDisconnected()\n      } else {\n        setConnectionStatus('connecting')\n        const selectedAddress = address[0]\n        if (selectedAddress !== currentAddress?.toStr()) {\n          setAddressSwitched(new BitcoinAddress(selectedAddress))\n          setCurrentSession(undefined)\n          const cur = sessions.find(\n            (item: Session) =>\n              item.getRoochAddress().toStr() === currentAddress?.genRoochAddress().toStr(),\n          )\n          if (cur && cur.getAuthKey() !== curSession?.getAuthKey()) {\n            setCurrentSession(cur)\n          }\n        }\n      }\n    },\n    [\n      sessions,\n      curSession,\n      currentAddress,\n      setAddressSwitched,\n      setConnectionStatus,\n      setCurrentSession,\n      setWalletDisconnected,\n    ],\n  )\n\n  // handle Listener\n  useEffect(() => {\n    if (connectionStatus === 'connected') {\n      currentWallet?.onAccountsChanged(accountsChangedHandler)\n    }\n\n    return () => {\n      if (connectionStatus === 'connected') {\n        currentWallet?.removeAccountsChanged(accountsChangedHandler)\n      }\n    }\n  }, [accountsChangedHandler, connectionStatus, currentWallet])\n\n  return children\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { createStore } from 'zustand'\nimport { createJSONStorage, persist } from 'zustand/middleware'\nimport { StateStorage } from 'zustand/middleware'\nimport { ThirdPartyAddress } from '@roochnetwork/rooch-sdk'\n\nimport { SupportChain } from '../feature/index.js'\n\nimport { Wallet } from '../wellet/index.js'\n\ntype WalletConnectionStatus = 'disconnected' | 'connecting' | 'connected'\n\nexport type WalletActions = {\n  setChain: (chain: SupportChain) => void\n  setAddressSwitched: (selectedAccount: ThirdPartyAddress) => void\n  setConnectionStatus: (connectionStatus: WalletConnectionStatus) => void\n  setWalletConnected: (\n    wallet: Wallet,\n    connectedAddress: readonly ThirdPartyAddress[],\n    selectedAddress: ThirdPartyAddress | null,\n  ) => void\n  updateWalletAddresses: (accounts: readonly ThirdPartyAddress[]) => void\n  setWalletDisconnected: () => void\n  updateWallets: (wallets: readonly Wallet[]) => void\n}\n\nexport type WalletStore = ReturnType<typeof createWalletStore>\n\nexport type WalletStoreState = {\n  autoConnectEnabled: boolean\n  currentChain: SupportChain\n  currentWallet: Wallet | undefined\n  wallets: readonly Wallet[]\n  addresses: readonly ThirdPartyAddress[]\n  currentAddress: ThirdPartyAddress | undefined\n  lastConnectedAddress: string | undefined\n  lastConnectedWalletName: string | undefined\n  connectionStatus: WalletConnectionStatus\n} & WalletActions\n\ntype WalletConfiguration = {\n  autoConnectEnabled: boolean\n  chain: SupportChain\n  currentWallet: Wallet | undefined\n  wallets: Wallet[]\n  storage: StateStorage\n  storageKey: string\n}\n\nexport function createWalletStore({\n  chain,\n  currentWallet,\n  wallets,\n  storage,\n  storageKey,\n  autoConnectEnabled,\n}: WalletConfiguration) {\n  return createStore<WalletStoreState>()(\n    persist(\n      (set, get) => ({\n        currentChain: chain,\n        autoConnectEnabled,\n        currentWallet,\n        wallets,\n        addresses: [],\n        currentAddress: undefined,\n        lastConnectedAddress: undefined,\n        lastConnectedWalletName: undefined,\n        connectionStatus: 'disconnected',\n        setChain(chain) {\n          const currentChain = get().currentChain\n\n          if (currentChain === chain) {\n            return\n          }\n          set(() => ({\n            currentChain: chain,\n            accounts: [],\n            // currentWallet: supportWallets.find((v) => v.getSupportNetworks()),\n            sessionAccount: null,\n            connectionStatus: 'disconnected',\n          }))\n        },\n        setConnectionStatus(connectionStatus) {\n          set(() => ({\n            connectionStatus,\n          }))\n        },\n        setWalletConnected(wallet, connectedAddresses, selectedAddress) {\n          set(() => ({\n            currentWallet: wallet,\n            accounts: connectedAddresses,\n            currentAddress: selectedAddress || undefined,\n            lastConnectedWalletName: wallet.getName(),\n            lastConnectedAddress: selectedAddress?.toStr(),\n            connectionStatus: 'connected',\n          }))\n        },\n        setWalletDisconnected() {\n          set(() => ({\n            accounts: [],\n            currentAddress: undefined,\n            lastConnectedWalletName: undefined,\n            lastConnectedAddress: undefined,\n            connectionStatus: 'disconnected',\n          }))\n        },\n        setAddressSwitched(selected) {\n          set(() => ({\n            currentAddress: selected,\n            lastConnectedAddress: selected.toStr() ?? '',\n          }))\n        },\n        updateWalletAddresses(addresses) {\n          const currentAddr = get().currentAddress\n          set(() => ({\n            currentAddress:\n              (currentAddr && addresses.find((addr) => addr.toStr() === currentAddr.toStr())) ||\n              addresses[0],\n          }))\n        },\n        updateWallets(wallets) {\n          set(() => ({\n            wallets: wallets,\n          }))\n        },\n      }),\n      {\n        name: storageKey,\n        storage: createJSONStorage(() => storage),\n        partialize: ({ lastConnectedWalletName, lastConnectedAddress }) => ({\n          lastConnectedWalletName,\n          lastConnectedAddress,\n        }),\n      },\n    ),\n  )\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useRoochContext } from './index.js'\n\nexport function useCurrentNetwork(): string {\n  return useRoochContext().network\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useContext } from 'react'\n\nimport { ClientContext, ClientProviderContext } from '../../provider/clientProvider.js'\n\nexport function useRoochContext(): ClientProviderContext {\n  const context = useContext(ClientContext)\n  if (!context) {\n    throw new Error(\n      'Could not find RoochClientContext. Ensure that you have set up the RoochClientProvider.',\n    )\n  }\n  return context\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RoochClient } from '@roochnetwork/rooch-sdk'\n\nimport { useRoochContext } from './useRoochContext.js'\n\nexport function useRoochClient(): RoochClient {\n  return useRoochContext().client\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useQuery } from '@tanstack/react-query'\nimport type { UseQueryOptions, UseQueryResult } from '@tanstack/react-query'\n\nimport type { RoochClient } from '@roochnetwork/rooch-sdk'\n\nimport type { PartialBy } from '../../types/index.js'\nimport { useRoochClient, useCurrentNetwork } from './index.js'\n\nexport type RpcMethodName = {\n  [K in keyof RoochClient]: RoochClient[K] extends\n    | ((input: any) => Promise<any>)\n    | (() => Promise<any>)\n    ? K\n    : never\n}[keyof RoochClient]\n\nexport type RpcMethods = {\n  [K in RpcMethodName]: RoochClient[K] extends (input: infer P) => Promise<infer R>\n    ? {\n        name: K\n        result: R\n        params: P\n      }\n    : RoochClient[K] extends () => Promise<infer R>\n      ? {\n          name: K\n          result: R\n          params: undefined | object\n        }\n      : never\n}\n\nexport type UseRoochClientQueryOptions<T extends keyof RpcMethods, TData> = PartialBy<\n  Omit<UseQueryOptions<RpcMethods[T]['result'], Error, TData, unknown[]>, 'queryFn'>,\n  'queryKey'\n>\n\nexport function useRoochClientQuery<T extends keyof RpcMethods, TData = RpcMethods[T]['result']>(\n  ...args: undefined extends RpcMethods[T]['params']\n    ? [method: T, params?: RpcMethods[T]['params'], options?: UseRoochClientQueryOptions<T, TData>]\n    : [method: T, params: RpcMethods[T]['params'], options?: UseRoochClientQueryOptions<T, TData>]\n): UseQueryResult<TData, Error> {\n  const [method, params, { queryKey = [], ...options } = {}] = args as [\n    method: T,\n    params?: RpcMethods[T]['params'],\n    options?: UseRoochClientQueryOptions<T, TData>,\n  ]\n\n  const network = useCurrentNetwork()\n  const roochClient = useRoochClient()\n\n  return useQuery({\n    ...options,\n    queryKey: [network, method, params, ...queryKey],\n    queryFn: async () => {\n      return await roochClient[method](params as never)\n    },\n  })\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query'\nimport { useMutation } from '@tanstack/react-query'\n\nimport { roochMutationKeys } from '../../constants/index.js'\nimport { useRoochContext } from './useRoochContext.js'\n\ntype UseSwitchNetworkArgs = string\n\ntype UseSwitchNetworkResult = void\n\ntype UseSwitchNetworkMutationOptions = Omit<\n  UseMutationOptions<UseSwitchNetworkResult, Error, UseSwitchNetworkArgs, unknown>,\n  'mutationFn'\n>\n\nexport function useSwitchNetwork({\n  mutationKey,\n  ...mutationOptions\n}: UseSwitchNetworkMutationOptions = {}): UseMutationResult<\n  UseSwitchNetworkResult,\n  Error,\n  UseSwitchNetworkArgs,\n  unknown\n> {\n  const switchNetwork = useRoochContext().selectNetwork\n\n  return useMutation({\n    mutationKey: roochMutationKeys.switchNetwork(mutationKey),\n    mutationFn: async (args) => {\n      switchNetwork(args)\n    },\n    ...mutationOptions,\n  })\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { MutationKey } from '@tanstack/react-query'\n\nfunction formMutationKeyFn(baseEntity: string) {\n  return function mutationKeyFn(additionalKeys: MutationKey = []) {\n    return [{ ...roochMutationKeys.all, baseEntity }, ...additionalKeys]\n  }\n}\n\nexport const roochMutationKeys = {\n  all: { baseScope: 'rooch' },\n  addNetwork: formMutationKeyFn('add-network'),\n  switchNetwork: formMutationKeyFn('switch-network'),\n  removeNetwork: formMutationKeyFn('remove-network'),\n  removeSession: formMutationKeyFn('remove-session'),\n  transferObject: formMutationKeyFn('transfer-object'),\n  transferCoin: formMutationKeyFn('transfer-coin'),\n  signAndExecuteTransaction: formMutationKeyFn('sign-and-execute-transaction'),\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { MutationKey } from '@tanstack/react-query'\n\nfunction formMutationKeyFn(baseEntity: string) {\n  return function mutationKeyFn(additionalKeys: MutationKey = []) {\n    return [{ ...walletMutationKeys.all, baseEntity }, ...additionalKeys]\n  }\n}\n\nexport const walletMutationKeys = {\n  all: { baseScope: 'wallet' },\n  connectWallet: formMutationKeyFn('connect-wallet'),\n  autoConnectWallet: formMutationKeyFn('auto-connect-wallet'),\n  switchAccount: formMutationKeyFn('switch-account'),\n  createSessionKey: formMutationKeyFn('create-session-key'),\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Signer, TypeArgs } from '@roochnetwork/rooch-sdk'\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query'\nimport { useMutation } from '@tanstack/react-query'\n\nimport { useRoochClient } from './useRoochClient.js'\nimport { roochMutationKeys } from '../../constants/index.js'\n\ntype UseTransferObjectArgs = {\n  signer: Signer\n  recipient: string\n  objectId: string\n  objectType: TypeArgs\n}\n\ntype UseTransferObjectResult = void\n\ntype UseSwitchNetworkMutationOptions = Omit<\n  UseMutationOptions<UseTransferObjectResult, Error, UseTransferObjectArgs, unknown>,\n  'mutationFn'\n>\n\nexport function useTransferObject({\n  mutationKey,\n  ...mutationOptions\n}: UseSwitchNetworkMutationOptions = {}): UseMutationResult<\n  UseTransferObjectResult,\n  Error,\n  UseTransferObjectArgs,\n  unknown\n> {\n  const client = useRoochClient()\n\n  return useMutation({\n    mutationKey: roochMutationKeys.transferObject(mutationKey),\n    mutationFn: async (args) => {\n      const result = await client.transferObject(args)\n\n      if (result.execution_info.status.type !== 'executed') {\n        Error('transfer failed' + result.execution_info.status.type)\n      }\n    },\n    ...mutationOptions,\n  })\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query'\nimport { useMutation } from '@tanstack/react-query'\nimport { address, TypeArgs, Signer } from '@roochnetwork/rooch-sdk'\n\nimport { roochMutationKeys } from '../../constants/index.js'\nimport { useRoochClient } from './index.js'\nimport { useCurrentSession } from '../useCurrentSession.js'\n\ntype UseTransferCoinArgs = {\n  signer?: Signer\n  recipient: address\n  amount: number | bigint\n  coinType: TypeArgs\n}\n\ntype UseTransferCoinResult = void\n\ntype UseSwitchNetworkMutationOptions = Omit<\n  UseMutationOptions<UseTransferCoinResult, Error, UseTransferCoinArgs, unknown>,\n  'mutationFn'\n>\n\nexport function useTransferCoin({\n  mutationKey,\n  ...mutationOptions\n}: UseSwitchNetworkMutationOptions = {}): UseMutationResult<\n  UseTransferCoinResult,\n  Error,\n  UseTransferCoinArgs,\n  unknown\n> {\n  const client = useRoochClient()\n  const curSession = useCurrentSession()\n\n  return useMutation({\n    mutationKey: roochMutationKeys.transferCoin(mutationKey),\n    mutationFn: async (args) => {\n      const signer = args.signer || curSession\n\n      if (signer === null) {\n        throw Error('')\n      }\n\n      const result = await client.transfer({\n        ...args,\n        signer: args.signer || curSession!,\n      })\n\n      if (result.execution_info.status.type !== 'executed') {\n        Error('transfer failed' + result.execution_info.status.type)\n      }\n    },\n    ...mutationOptions,\n  })\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useSessionStore } from './useSessionsStore.js'\n\n/**\n * Retrieves the session account that is currently selected, if one exists.\n */\nexport function useCurrentSession() {\n  return useSessionStore((state) => state.currentSession)\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { RoochClientOptions } from '@roochnetwork/rooch-sdk'\n\nimport { useRoochContext } from './useRoochContext.js'\n\nexport type NetworkConfig<T extends object = object> = RoochClientOptions & {\n  variables?: T\n}\n\nexport function createNetworkConfig<\n  const T extends Record<string, Config>,\n  Config extends NetworkConfig<Variables> = T[keyof T],\n  Variables extends object = NonNullable<Config['variables']>,\n>(networkConfig: T) {\n  function useNetworkConfig(): Config {\n    const { config } = useRoochContext()\n\n    if (!config) {\n      throw new Error('No network config found')\n    }\n\n    return config as T[keyof T]\n  }\n\n  function useNetworkVariables(): Variables {\n    const { variables } = useNetworkConfig()\n\n    return (variables ?? {}) as Variables\n  }\n\n  function useNetworkVariable<K extends keyof Variables>(name: K): Variables[K] {\n    const variables = useNetworkVariables()\n\n    return variables[name]\n  }\n\n  return {\n    networkConfig,\n    useNetworkConfig,\n    useNetworkVariables,\n    useNetworkVariable,\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { UseMutationOptions, UseMutationResult, useMutation } from '@tanstack/react-query'\n\nimport { Signer, Transaction, ExecuteTransactionResponseView } from '@roochnetwork/rooch-sdk'\n\nimport { useRoochClient } from './useRoochClient.js'\nimport { roochMutationKeys } from '../../constants/index.js'\nimport { useCurrentSession } from '../useCurrentSession.js'\n\ntype UseSignAndExecuteTransactionArgs = {\n  transaction: Transaction\n  signer?: Signer\n}\n\ntype UsesignAndExecuteTransactionResult = ExecuteTransactionResponseView\n\ntype UsesignAndExecuteTransactionOptions = Omit<\n  UseMutationOptions<\n    UsesignAndExecuteTransactionResult,\n    Error,\n    UseSignAndExecuteTransactionArgs,\n    unknown\n  >,\n  'mutationFn'\n>\n\nexport function UseSignAndExecuteTransaction({\n  mutationKey,\n  ...mutationOptions\n}: UsesignAndExecuteTransactionOptions = {}): UseMutationResult<\n  UsesignAndExecuteTransactionResult,\n  Error,\n  UseSignAndExecuteTransactionArgs,\n  unknown\n> {\n  const client = useRoochClient()\n  const session = useCurrentSession()\n\n  return useMutation({\n    mutationKey: roochMutationKeys.signAndExecuteTransaction(mutationKey),\n    mutationFn: async (args) => {\n      if (!session) {\n        throw Error('Create a session first')\n      }\n\n      const result = await client.signAndExecuteTransaction({\n        transaction: args.transaction,\n        signer: args.signer || session,\n      })\n\n      if (result.execution_info.status.type !== 'executed' && result.execution_info.status) {\n        Error('transfer failed' + result.execution_info.status.type)\n      }\n\n      return result\n    },\n    ...mutationOptions,\n  })\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useContext } from 'react'\nimport { useStore } from 'zustand'\n\nimport { WalletContext } from '../../provider/index.js'\nimport type { WalletStoreState } from '../../provider/walletStore.js'\n\nexport function useWalletStore<T>(selector: (state: WalletStoreState) => T): T {\n  const store = useContext(WalletContext)\n  if (!store) {\n    throw new Error('Could not find WalletContext. Ensure that you have set up the WalletProvider.')\n  }\n  return useStore(store, selector)\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useWalletStore } from './useWalletStore.js'\n\n/**\n * Retrieves all wallets\n */\nexport function useAddresses() {\n  return useWalletStore((state) => state.addresses)\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useQuery } from '@tanstack/react-query'\nimport { useLayoutEffect, useState } from 'react'\n\nimport {\n  useWalletStore,\n  useConnectWallet,\n  useWallets,\n  useCurrentWallet,\n  useCurrentAddress,\n} from './index.js'\n\nexport function useAutoConnectWallet(): 'disabled' | 'idle' | 'attempted' {\n  const { mutateAsync: connectWallet } = useConnectWallet()\n  const autoConnectEnabled = useWalletStore((state) => state.autoConnectEnabled)\n  const lastConnectedWalletName = useWalletStore((state) => state.lastConnectedWalletName)\n  const lastConnectedAddress = useWalletStore((state) => state.lastConnectedAddress)\n  const { isConnected } = useCurrentWallet()\n  const wallets = useWallets()\n  const [clientOnly, setClientOnly] = useState(false)\n  const currentAddress = useCurrentAddress()\n\n  useLayoutEffect(() => {\n    setClientOnly(true)\n  }, [])\n\n  const { data, isError } = useQuery({\n    queryKey: [\n      '@rooch/sdk-kit',\n      'autoconnect',\n      {\n        isConnected,\n        autoConnectEnabled,\n        lastConnectedWalletName,\n        lastConnectedAddress,\n      },\n    ],\n    queryFn: async () => {\n      if (!autoConnectEnabled) {\n        return 'disabled'\n      }\n\n      if (!lastConnectedWalletName || !lastConnectedAddress || isConnected) {\n        return 'attempted'\n      }\n\n      let wallet = wallets.find((wallet) => wallet.getName() === lastConnectedWalletName)\n\n      if (wallet) {\n        await connectWallet({ wallet })\n        if (wallet.getChain() !== 'bitcoin' && currentAddress?.toStr() !== lastConnectedAddress) {\n          wallet.switchAccount(lastConnectedAddress)\n        }\n      }\n\n      return 'attempted'\n    },\n    enabled: autoConnectEnabled,\n    persister: undefined,\n    gcTime: 0,\n    staleTime: 0,\n    networkMode: 'always',\n    retry: (failureCount) => {\n      // Retry only if there is a wallet to connect and we haven't exceeded 3 attempts\n      if (\n        wallets.find((wallet) => wallet.getName() === lastConnectedWalletName) &&\n        failureCount < 3\n      ) {\n        return true\n      }\n      return false\n    },\n    retryOnMount: false,\n    refetchInterval: 1000,\n    refetchIntervalInBackground: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n  })\n\n  if (!autoConnectEnabled) {\n    return 'disabled'\n  }\n\n  // We always initialize with \"idle\" so that in SSR environments, we guarantee that the initial render states always agree:\n  if (!clientOnly) {\n    return 'idle'\n  }\n\n  if (!lastConnectedWalletName) {\n    return 'attempted'\n  }\n\n  return isError ? 'attempted' : data ?? 'idle'\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query'\nimport { useMutation } from '@tanstack/react-query'\nimport { ThirdPartyAddress, Session } from '@roochnetwork/rooch-sdk'\n\nimport { useWalletStore } from './useWalletStore.js'\nimport { walletMutationKeys } from '../../constants/index.js'\nimport { Wallet } from '../../wellet/index.js'\nimport { useSessionStore } from '../useSessionsStore.js'\nimport { useSession } from '../useSessions.js'\n\ntype ConnectWalletArgs = {\n  wallet: Wallet\n}\ntype ConnectWalletResult = ThirdPartyAddress[]\n\ntype UseConnectWalletMutationOptions = Omit<\n  UseMutationOptions<ConnectWalletResult, Error, ConnectWalletArgs, unknown>,\n  'mutationFn'\n>\n\n/**\n * Mutation hook for establishing a connection to a specific wallet.\n *\n */\nexport function useConnectWallet({\n  mutationKey,\n  ...mutationOptions\n}: UseConnectWalletMutationOptions = {}): UseMutationResult<\n  ConnectWalletResult,\n  Error,\n  ConnectWalletArgs,\n  unknown\n> {\n  const sessions = useSession()\n  const setCurrentSession = useSessionStore((state) => state.setCurrentSession)\n  const setWalletConnected = useWalletStore((state) => state.setWalletConnected)\n  const setConnectionStatus = useWalletStore((state) => state.setConnectionStatus)\n\n  return useMutation({\n    mutationKey: walletMutationKeys.connectWallet(mutationKey),\n    mutationFn: async ({ wallet }) => {\n      try {\n        setConnectionStatus('connecting')\n\n        const connectAddress = await wallet.connect()\n        const selectedAddress = connectAddress[0]\n\n        setWalletConnected(wallet, connectAddress, selectedAddress)\n\n        const cur = sessions.find(\n          (item: Session) =>\n            item.getRoochAddress().toStr() === selectedAddress?.genRoochAddress().toStr(),\n        )\n\n        setCurrentSession(cur)\n\n        return connectAddress\n      } catch (error) {\n        setConnectionStatus('disconnected')\n        throw error\n      }\n    },\n    ...mutationOptions,\n  })\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useSessionStore } from './useSessionsStore.js'\n\n/**\n * Retrieves the all session account\n */\nexport function useSession() {\n  return useSessionStore((state) =>\n    state.sessions.sort((a, b) => b.getCreateTime() - a.getCreateTime()),\n  )\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useWalletStore } from './index.js'\n\n/**\n * Retrieves all wallets\n */\nexport function useCurrentAddress() {\n  return useWalletStore((state) => state.currentAddress)\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useWalletStore } from './useWalletStore.js'\n\n/**\n * Retrieves the wallet that is currently connected to the dApp, if one exists.\n */\nexport function useCurrentWallet() {\n  const currentWallet = useWalletStore((state) => state.currentWallet)\n  const connectionStatus = useWalletStore((state) => state.connectionStatus)\n  switch (connectionStatus) {\n    case 'connecting':\n      return {\n        status: connectionStatus,\n        wallet: currentWallet,\n        isDisconnected: false,\n        isConnecting: true,\n        isConnected: false,\n      } as const\n    case 'disconnected':\n      return {\n        status: connectionStatus,\n        wallet: currentWallet,\n        isDisconnected: true,\n        isConnecting: false,\n        isConnected: false,\n      } as const\n    case 'connected': {\n      return {\n        status: connectionStatus,\n        wallet: currentWallet,\n        isDisconnected: false,\n        isConnecting: false,\n        isConnected: true,\n      } as const\n    }\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query'\nimport { useMutation } from '@tanstack/react-query'\nimport { Session } from '@roochnetwork/rooch-sdk'\nimport type { CreateSessionArgs } from '@roochnetwork/rooch-sdk'\n\nimport { useRoochClient } from '../client/index.js'\nimport { useCurrentWallet } from './useCurrentWallet.js'\nimport { walletMutationKeys } from '../../constants/index.js'\nimport { WalletNotConnectedError } from '../../error/walletErrors.js'\nimport { useSessionStore } from '../useSessionsStore.js'\n\ntype UseCreateSessionKeyArgs = CreateSessionArgs\n\ntype UseCreateSessionKeyError = WalletNotConnectedError | Error\n\ntype UseCreateSessionKeyResult = Session | null\n\ntype UseCreateSessionKeyMutationOptions = Omit<\n  UseMutationOptions<\n    UseCreateSessionKeyResult,\n    UseCreateSessionKeyError,\n    UseCreateSessionKeyArgs,\n    unknown\n  >,\n  'mutationFn'\n>\n\nexport function useCreateSessionKey({\n  mutationKey,\n  ...mutationOptions\n}: UseCreateSessionKeyMutationOptions = {}): UseMutationResult<\n  UseCreateSessionKeyResult,\n  UseCreateSessionKeyError,\n  UseCreateSessionKeyArgs,\n  unknown\n> {\n  const client = useRoochClient()\n  const currentWallet = useCurrentWallet()\n  const setCurrentSession = useSessionStore((state) => state.setCurrentSession)\n\n  return useMutation({\n    mutationKey: walletMutationKeys.createSessionKey(mutationKey),\n    mutationFn: async (args) => {\n      if (!currentWallet.isConnected) {\n        throw new WalletNotConnectedError('No wallet is connected.')\n      }\n\n      const sessionAccount = await client.createSession({\n        signer: currentWallet.wallet!,\n        sessionArgs: args,\n      })\n\n      setCurrentSession(sessionAccount)\n\n      return sessionAccount\n    },\n    ...mutationOptions,\n  })\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * An error that is instantiated when someone attempts to perform an action that requires an active wallet connection.\n */\nexport class WalletNotConnectedError extends Error {}\n\n/**\n * An error that is instantiated when someone attempts to perform an action that requires a selected wallet account.\n * This is more of an edge case stemming from the fact that wallets don't technically require you to authorize any\n * accounts when connecting a wallet.\n */\nexport class WalletNoAccountSelectedError extends Error {}\n\n/**\n * An error that is instantiated when someone attempts to perform an action that isn't supported by a wallet.\n */\nexport class WalletFeatureNotSupportedError extends Error {}\n\n/**\n * An error that is instantiated when a wallet account can't be found for a specific wallet.\n */\nexport class WalletAccountNotFoundError extends Error {}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useWalletStore } from './useWalletStore.js'\n\n/**\n * Retrieves all wallets\n */\nexport function useWallets() {\n  return useWalletStore((state) => state.wallets)\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Wallet } from '../../wellet/index.js'\nimport { useWalletStore } from './useWalletStore.js'\nimport { useEffect } from 'react'\nimport { getWallets } from '../../wellet/wallets.js'\nimport { getRegisteredWallets } from '../../wellet/util.js'\n\n/**\n * Retrieves all wallets\n */\nexport function useWalletChanged(\n  preferredWallets: string[],\n  walletFilter?: (wallet: Wallet) => boolean,\n) {\n  const updateWallets = useWalletStore((state) => state.updateWallets)\n\n  useEffect(() => {\n    const api = getWallets()\n    updateWallets(getRegisteredWallets(preferredWallets, walletFilter))\n\n    const unsubscribeFromRegister = api.on('register', () => {\n      updateWallets(getRegisteredWallets(preferredWallets, walletFilter))\n    })\n\n    return () => {\n      unsubscribeFromRegister()\n    }\n  }, [preferredWallets, updateWallets, walletFilter])\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Wallet } from './wallet.js'\n\nlet wallets: Wallets | undefined = undefined\nconst registered = new Set<Wallet>()\nconst listeners: { [E in WalletsEventNames]?: WalletsEventsListeners[E][] } = {}\n\nexport function getWallets(): Wallets {\n  if (wallets) return wallets\n  wallets = Object.freeze({ register, get, on })\n\n  return wallets\n}\n\nexport interface Wallets {\n  /**\n   * Get all Wallets that have been registered.\n   *\n   * @return Registered Wallets.\n   */\n  get(): readonly Wallet[]\n\n  /**\n   * Add an event listener and subscribe to events for Wallets that are\n   * {@link WalletsEventsListeners.register | registered} and\n   * {@link WalletsEventsListeners.unregister | unregistered}.\n   *\n   * @param event    Event type to listen for. {@link WalletsEventsListeners.register | `register`} and\n   * {@link WalletsEventsListeners.unregister | `unregister`} are the only event types.\n   * @param listener Function that will be called when an event of the type is emitted.\n   *\n   * @return\n   * `off` function which may be called to remove the event listener and unsubscribe from events.\n   *\n   * As with all event listeners, be careful to avoid memory leaks.\n   */\n  on<E extends WalletsEventNames>(event: E, listener: WalletsEventsListeners[E]): () => void\n\n  /**\n   * Register Wallets. This can be used to programmatically wrap non-standard wallets as Standard Wallets.\n   *\n   * Apps generally do not need to, and should not, call this.\n   *\n   * @param wallets Wallets to register.\n   *\n   * @return\n   * `unregister` function which may be called to programmatically unregister the registered Wallets.\n   *\n   * Apps generally do not need to, and should not, call this.\n   */\n  register(...wallets: Wallet[]): () => void\n}\n\nexport interface WalletsEventsListeners {\n  /**\n   * Emitted when Wallets are registered.\n   *\n   * @param wallets Wallets that were registered.\n   */\n  register(...wallets: Wallet[]): void\n\n  /**\n   * Emitted when Wallets are unregistered.\n   *\n   * @param wallets Wallets that were unregistered.\n   */\n  unregister(...wallets: Wallet[]): void\n}\n\n/**\n * Names of {@link WalletsEventsListeners} that can be listened for.\n *\n * @group App\n */\nexport type WalletsEventNames = keyof WalletsEventsListeners\n\nexport function register(...wallets: Wallet[]) {\n  wallets.forEach((wallet) => registered.add(wallet))\n  listeners['register']?.forEach((listener) => guard(() => listener(...wallets)))\n\n  return function unregister(): void {\n    wallets.forEach((wallet) => registered.delete(wallet))\n    listeners['unregister']?.forEach((listener) => guard(() => listener(...wallets)))\n  }\n}\n\nfunction get(): readonly Wallet[] {\n  return [...registered]\n}\n\nfunction on<E extends WalletsEventNames>(\n  event: E,\n  listener: WalletsEventsListeners[E],\n): () => void {\n  listeners[event]?.push(listener) || (listeners[event] = [listener])\n  // Return a function that removes the event listener.\n  return function off(): void {\n    listeners[event] = listeners[event]?.filter((existingListener) => listener !== existingListener)\n  }\n}\n\nfunction guard(callback: () => void) {\n  try {\n    callback()\n  } catch (error) {\n    console.error(error)\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Wallet } from './wallet.js'\nimport { getWallets } from './wallets.js'\n\nexport function getRegisteredWallets(\n  preferredWallets: string[],\n  walletFilter?: (wallet: Wallet) => boolean,\n): Wallet[] {\n  const walletsApi = getWallets()\n  const wallets = walletsApi.get()\n\n  const Wallets = wallets.filter((wallet) => !walletFilter || walletFilter(wallet))\n\n  return [\n    // Preferred wallets, in order:\n    ...preferredWallets.map((name) => Wallets.find((wallet) => wallet.getName() === name)),\n    // Wallets in default order:\n    ...Wallets.filter((wallet) => !preferredWallets.includes(wallet.getName())),\n  ].filter((wallet): wallet is Wallet => wallet !== undefined)\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query'\nimport { useMutation } from '@tanstack/react-query'\n\nimport { Session } from '@roochnetwork/rooch-sdk'\nimport { roochMutationKeys } from '../constants/index.js'\nimport { useCurrentSession, useRoochClient, useSession } from './index.js'\nimport { useSessionStore } from './useSessionsStore.js'\n\ntype UseRemoveSessionArgs = {\n  authKey: string\n}\n\ntype UseRemoveSessionResult = void\n\ntype UseRemoveSessionMutationOptions = Omit<\n  UseMutationOptions<UseRemoveSessionResult, Error, UseRemoveSessionArgs, unknown>,\n  'mutationFn'\n>\n\nexport function useRemoveSession({\n  mutationKey,\n  ...mutationOptions\n}: UseRemoveSessionMutationOptions = {}): UseMutationResult<\n  UseRemoveSessionResult,\n  Error,\n  UseRemoveSessionArgs,\n  unknown\n> {\n  const sessionsKeys = useSession()\n  const removeSession = useSessionStore((state) => state.removeSession)\n  const setCurrentSession = useSessionStore((state) => state.setCurrentSession)\n  const currentSession = useCurrentSession()\n  const client = useRoochClient()\n  const curSessionKey = useCurrentSession()\n\n  return useMutation({\n    mutationKey: roochMutationKeys.removeSession(mutationKey),\n    mutationFn: async (args) => {\n      try {\n        if (!curSessionKey) {\n          return\n        }\n\n        const result = await client.removeSession({\n          authKey: args.authKey,\n          signer: curSessionKey,\n        })\n\n        if (result) {\n          // clean cache\n          let cacheSession = sessionsKeys.find(\n            (item: Session) => item.getAuthKey() === args.authKey,\n          )\n\n          if (cacheSession) {\n            removeSession(cacheSession)\n            if (cacheSession.getAuthKey() === currentSession?.getAuthKey()) {\n              setCurrentSession(undefined)\n            }\n          }\n        }\n      } catch (e) {\n        throw e\n      }\n    },\n    ...mutationOptions,\n  })\n}\n"],
  "mappings": "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",
  "names": ["createContext", "get", "BitcoinAddress", "BitcoinAddress", "BitcoinAddress", "str", "bytes", "str", "bytes", "BitcoinAddress", "BitcoinAddress", "str", "bytes", "str", "bytes", "BitcoinAddress", "wallets", "jsx", "createContext", "useCallback", "createContext", "useEffect", "useRef", "BitcoinAddress", "createStore", "createJSONStorage", "persist", "wallets", "get", "chain", "useContext", "useContext", "formMutationKeyFn", "useMutation", "useMutation", "useMutation", "useMutation", "useMutation", "useMutation", "useContext", "useStore", "useContext", "useStore", "useQuery", "useState", "wallets", "useState", "useQuery", "wallet", "useMutation", "useMutation", "useMutation", "useMutation", "wallets", "wallets", "useMutation", "useMutation", "jsx", "createContext", "useRef", "useEffect", "wallets", "useCallback", "BitcoinAddress"]
}
