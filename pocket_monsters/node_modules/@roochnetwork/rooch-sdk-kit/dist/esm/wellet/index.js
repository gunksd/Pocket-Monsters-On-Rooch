// src/wellet/wallet.ts
import { Signer } from "@roochnetwork/rooch-sdk";
var Wallet = class extends Signer {
  /**
   * Checks if the wallet is installed.
   * @returns A promise that resolves to true if the wallet is installed, otherwise false.
   */
  async checkInstalled() {
    for (let i = 1; i < 10 && !this.getTarget(); i += 1) {
      await new Promise((resolve) => setTimeout(resolve, 100 * i));
    }
    return Promise.resolve(this.getTarget() !== void 0);
  }
};

// src/wellet/bitcoin.ts
import {
  Authenticator,
  BitcoinSignMessage,
  Secp256k1PublicKey,
  fromHEX
} from "@roochnetwork/rooch-sdk";
var BitcoinWallet = class extends Wallet {
  async signTransaction(input) {
    const message = new BitcoinSignMessage(input.hashData(), input.getInfo() || "");
    return Authenticator.bitcoin(message, this, "raw");
  }
  getPublicKey() {
    if (!this.publicKey) {
      throw Error("Please connect your wallet first");
    }
    return new Secp256k1PublicKey(fromHEX(this.publicKey));
  }
  getRoochAddress() {
    if (!this.currentAddress) {
      throw Error("Please connect your wallet first");
    }
    return this.currentAddress.genRoochAddress();
  }
  getBitcoinAddress() {
    if (!this.currentAddress) {
      throw Error("Please connect your wallet first");
    }
    return this.currentAddress;
  }
  getKeyScheme() {
    return "Secp256k1";
  }
  normalize_recovery_id(v) {
    let normalizeV = v - 27 - 4;
    if (normalizeV < 0) {
      normalizeV = normalizeV + 4;
    }
    return normalizeV;
  }
  switchAccount() {
    throw new Error("Method not implemented.");
  }
  getChain() {
    return "bitcoin";
  }
};

// src/wellet/unisat.ts
import { BitcoinAddress as BitcoinAddress2, str, bytes } from "@roochnetwork/rooch-sdk";
var UNISAT_SUPPORT_NETWORKS = ["livenet", "testnet"];
var UniSatWallet = class extends BitcoinWallet {
  getName() {
    return "unisat";
  }
  getTarget() {
    return window.unisat;
  }
  async connect() {
    let addresses = await this.getTarget().getAccounts();
    if (!addresses || addresses.length === 0) {
      await this.getTarget().requestAccounts();
      return this.connect();
    }
    let publicKey = await this.getTarget().getPublicKey();
    this.address = addresses.map((item) => new BitcoinAddress2(item));
    this.currentAddress = this.address[0];
    this.publicKey = publicKey;
    return this.address;
  }
  switchNetwork(network) {
    this.getTarget().switchNetwork(network);
  }
  getNetwork() {
    return this.getTarget().getNetwork();
  }
  getSupportNetworks() {
    return UNISAT_SUPPORT_NETWORKS;
  }
  onAccountsChanged(callback) {
    this.getTarget().on("accountsChanged", callback);
  }
  removeAccountsChanged(callback) {
    this.getTarget().removeListener("accountsChanged", callback);
  }
  onNetworkChanged(callback) {
    this.getTarget().on("networkChanged", callback);
  }
  removeNetworkChanged(callback) {
    this.getTarget().removeListener("networkChanged", callback);
  }
  async sign(msg) {
    const msgStr = str("utf8", msg);
    const sign = await this.getTarget().signMessage(msgStr);
    return bytes("base64", sign).subarray(1);
  }
};

// src/wellet/okx.ts
import { BitcoinAddress as BitcoinAddress3, str as str2, bytes as bytes2 } from "@roochnetwork/rooch-sdk";
var OkxWallet = class extends BitcoinWallet {
  getName() {
    return "okx";
  }
  async sign(msg) {
    const msgStr = str2("utf8", msg);
    const sign = await this.getTarget().signMessage(msgStr, {
      from: this.currentAddress?.toStr()
    });
    return bytes2("base64", sign).subarray(1);
  }
  getTarget() {
    return window.okxwallet?.bitcoin;
  }
  async connect() {
    const obj = await this.getTarget().connect();
    this.currentAddress = new BitcoinAddress3(obj.address);
    this.publicKey = obj.compressedPublicKey !== "" ? obj.compressedPublicKey : obj.publicKey;
    this.address = [this.currentAddress];
    return this.address;
  }
  switchNetwork() {
    this.getTarget().switchNetwork();
  }
  getNetwork() {
    return this.getTarget().getNetwork();
  }
  getSupportNetworks() {
    return ["livenet"];
  }
  onAccountsChanged(callback) {
    this.getTarget().on("accountsChanged", callback);
  }
  removeAccountsChanged(callback) {
    this.getTarget().removeListener("accountsChanged", callback);
  }
  onNetworkChanged(callback) {
    this.getTarget().on("networkChanged", callback);
  }
  removeNetworkChanged(callback) {
    this.getTarget().removeListener("networkChanged", callback);
  }
};

// src/wellet/onekey.ts
import { BitcoinAddress as BitcoinAddress4, str as str3, bytes as bytes3 } from "@roochnetwork/rooch-sdk";
var OnekeyWallet = class extends BitcoinWallet {
  getName() {
    return "onekey";
  }
  async sign(msg) {
    const msgStr = str3("utf8", msg);
    const sign = await this.getTarget().signMessage(msgStr);
    return bytes3("base64", sign).subarray(1);
  }
  getTarget() {
    return window.$onekey?.btc;
  }
  async connect() {
    let addresses = await this.getTarget().getAccounts();
    if (!addresses || addresses.length === 0) {
      await this.getTarget().requestAccounts();
      return this.connect();
    }
    let publicKey = await this.getTarget().getPublicKey();
    this.address = addresses.map((item) => new BitcoinAddress4(item));
    this.currentAddress = this.address[0];
    this.publicKey = publicKey;
    return this.address;
  }
  switchNetwork() {
    this.getTarget().switchNetwork();
  }
  getNetwork() {
    return this.getTarget().getNetwork();
  }
  getSupportNetworks() {
    return ["livenet"];
  }
  onAccountsChanged(callback) {
    this.getTarget().on("accountsChanged", callback);
  }
  removeAccountsChanged(callback) {
    this.getTarget().removeListener("accountsChanged", callback);
  }
  onNetworkChanged(callback) {
    this.getTarget().on("networkChanged", callback);
  }
  removeNetworkChanged(callback) {
    this.getTarget().removeListener("networkChanged", callback);
  }
};
export {
  BitcoinWallet,
  OkxWallet,
  OnekeyWallet,
  UniSatWallet,
  Wallet
};
//# sourceMappingURL=index.js.map
