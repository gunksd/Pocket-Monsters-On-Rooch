{
  "version": 3,
  "sources": ["../../../src/provider/sessionStore.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { createStore } from 'zustand'\nimport { createJSONStorage, persist, StateStorage } from 'zustand/middleware'\nimport { Session } from '@roochnetwork/rooch-sdk'\n\nexport type SessionActions = {\n  addSession: (session: Session) => void\n  setCurrentSession: (session?: Session) => void\n  removeSession: (session: Session) => void\n}\n\nexport type SessionStoreState = {\n  sessions: Session[]\n  currentSession: Session | null\n} & SessionActions\n\nexport type SessionStore = ReturnType<typeof createSessionStore>\n\ntype ClientConfiguration = {\n  storage: StateStorage\n  storageKey: string\n}\n\nexport function createSessionStore({ storage, storageKey }: ClientConfiguration) {\n  return createStore<SessionStoreState>()(\n    persist(\n      (set, get) => ({\n        sessions: [],\n        currentSession: null,\n        addSession(session) {\n          const cache = get().sessions\n          cache.push(session)\n          set(() => ({\n            sessions: cache,\n          }))\n        },\n        setCurrentSession(session) {\n          if (!session) {\n            set(() => ({\n              currentSession: null,\n            }))\n          } else {\n            const cache = get().sessions\n            if (!cache.find((item) => item.getAuthKey() === session.getAuthKey())) {\n              cache.push(session)\n            }\n            set(() => ({\n              currentSession: session,\n              sessions: cache,\n            }))\n          }\n        },\n        removeSession(session) {\n          const cacheSessions = get().sessions\n          const cacheCurSession = get().currentSession\n          set(() => ({\n            currentSession:\n              cacheCurSession?.getAuthKey() === session.getAuthKey() ? null : cacheCurSession,\n            sessions: cacheSessions.filter((c) => c.getAuthKey() !== session.getAuthKey()),\n          }))\n        },\n      }),\n      {\n        name: storageKey,\n        storage: createJSONStorage(() => storage, {\n          reviver: (key, value) => {\n            if (key === 'sessions') {\n              return (value as any[]).map((session: any) => Session.fromJson(session))\n            }\n            return value\n          },\n        }),\n        partialize: ({ sessions }) => ({\n          sessions,\n        }),\n      },\n    ),\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,qBAA4B;AAC5B,wBAAyD;AACzD,uBAAwB;AAoBjB,SAAS,mBAAmB,EAAE,SAAS,WAAW,GAAwB;AAC/E,aAAO,4BAA+B;AAAA,QACpC;AAAA,MACE,CAAC,KAAK,SAAS;AAAA,QACb,UAAU,CAAC;AAAA,QACX,gBAAgB;AAAA,QAChB,WAAW,SAAS;AAClB,gBAAM,QAAQ,IAAI,EAAE;AACpB,gBAAM,KAAK,OAAO;AAClB,cAAI,OAAO;AAAA,YACT,UAAU;AAAA,UACZ,EAAE;AAAA,QACJ;AAAA,QACA,kBAAkB,SAAS;AACzB,cAAI,CAAC,SAAS;AACZ,gBAAI,OAAO;AAAA,cACT,gBAAgB;AAAA,YAClB,EAAE;AAAA,UACJ,OAAO;AACL,kBAAM,QAAQ,IAAI,EAAE;AACpB,gBAAI,CAAC,MAAM,KAAK,CAAC,SAAS,KAAK,WAAW,MAAM,QAAQ,WAAW,CAAC,GAAG;AACrE,oBAAM,KAAK,OAAO;AAAA,YACpB;AACA,gBAAI,OAAO;AAAA,cACT,gBAAgB;AAAA,cAChB,UAAU;AAAA,YACZ,EAAE;AAAA,UACJ;AAAA,QACF;AAAA,QACA,cAAc,SAAS;AACrB,gBAAM,gBAAgB,IAAI,EAAE;AAC5B,gBAAM,kBAAkB,IAAI,EAAE;AAC9B,cAAI,OAAO;AAAA,YACT,gBACE,iBAAiB,WAAW,MAAM,QAAQ,WAAW,IAAI,OAAO;AAAA,YAClE,UAAU,cAAc,OAAO,CAAC,MAAM,EAAE,WAAW,MAAM,QAAQ,WAAW,CAAC;AAAA,UAC/E,EAAE;AAAA,QACJ;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,aAAS,qCAAkB,MAAM,SAAS;AAAA,UACxC,SAAS,CAAC,KAAK,UAAU;AACvB,gBAAI,QAAQ,YAAY;AACtB,qBAAQ,MAAgB,IAAI,CAAC,YAAiB,yBAAQ,SAAS,OAAO,CAAC;AAAA,YACzE;AACA,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAAA,QACD,YAAY,CAAC,EAAE,SAAS,OAAO;AAAA,UAC7B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
