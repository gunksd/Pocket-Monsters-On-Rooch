"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/index.ts
var utils_exports = {};
__export(utils_exports, {
  StorageType: () => StorageType,
  checkWallets: () => checkWallets,
  createInMemoryStore: () => createInMemoryStore,
  getDefaultStorage: () => getDefaultStorage
});
module.exports = __toCommonJS(utils_exports);

// src/utils/stateStorage.ts
function createInMemoryStore() {
  const store = /* @__PURE__ */ new Map();
  return {
    getItem(key) {
      return store.get(key);
    },
    setItem(key, value) {
      store.set(key, value);
    },
    removeItem(key) {
      store.delete(key);
    }
  };
}
var StorageType = /* @__PURE__ */ ((StorageType2) => {
  StorageType2[StorageType2["Session"] = 0] = "Session";
  StorageType2[StorageType2["Local"] = 1] = "Local";
  return StorageType2;
})(StorageType || {});
function getDefaultStorage(type) {
  let storage;
  switch (type) {
    case 0 /* Session */:
      storage = typeof window !== "undefined" && window.sessionStorage ? sessionStorage : void 0;
      break;
    case 1 /* Local */:
      storage = typeof window !== "undefined" && window.localStorage ? localStorage : void 0;
  }
  if (!storage) {
    storage = createInMemoryStore();
  }
  return storage;
}

// src/wellet/wallet.ts
var import_rooch_sdk = require("@roochnetwork/rooch-sdk");
var Wallet = class extends import_rooch_sdk.Signer {
  /**
   * Checks if the wallet is installed.
   * @returns A promise that resolves to true if the wallet is installed, otherwise false.
   */
  async checkInstalled() {
    for (let i = 1; i < 10 && !this.getTarget(); i += 1) {
      await new Promise((resolve) => setTimeout(resolve, 100 * i));
    }
    return Promise.resolve(this.getTarget() !== void 0);
  }
};

// src/wellet/bitcoin.ts
var import_rooch_sdk2 = require("@roochnetwork/rooch-sdk");
var BitcoinWallet = class extends Wallet {
  async signTransaction(input) {
    const message = new import_rooch_sdk2.BitcoinSignMessage(input.hashData(), input.getInfo() || "");
    return import_rooch_sdk2.Authenticator.bitcoin(message, this, "raw");
  }
  getPublicKey() {
    if (!this.publicKey) {
      throw Error("Please connect your wallet first");
    }
    return new import_rooch_sdk2.Secp256k1PublicKey((0, import_rooch_sdk2.fromHEX)(this.publicKey));
  }
  getRoochAddress() {
    if (!this.currentAddress) {
      throw Error("Please connect your wallet first");
    }
    return this.currentAddress.genRoochAddress();
  }
  getBitcoinAddress() {
    if (!this.currentAddress) {
      throw Error("Please connect your wallet first");
    }
    return this.currentAddress;
  }
  getKeyScheme() {
    return "Secp256k1";
  }
  normalize_recovery_id(v) {
    let normalizeV = v - 27 - 4;
    if (normalizeV < 0) {
      normalizeV = normalizeV + 4;
    }
    return normalizeV;
  }
  switchAccount() {
    throw new Error("Method not implemented.");
  }
  getChain() {
    return "bitcoin";
  }
};

// src/wellet/unisat.ts
var import_rooch_sdk3 = require("@roochnetwork/rooch-sdk");
var UNISAT_SUPPORT_NETWORKS = ["livenet", "testnet"];
var UniSatWallet = class extends BitcoinWallet {
  getName() {
    return "unisat";
  }
  getTarget() {
    return window.unisat;
  }
  async connect() {
    let addresses = await this.getTarget().getAccounts();
    if (!addresses || addresses.length === 0) {
      await this.getTarget().requestAccounts();
      return this.connect();
    }
    let publicKey = await this.getTarget().getPublicKey();
    this.address = addresses.map((item) => new import_rooch_sdk3.BitcoinAddress(item));
    this.currentAddress = this.address[0];
    this.publicKey = publicKey;
    return this.address;
  }
  switchNetwork(network) {
    this.getTarget().switchNetwork(network);
  }
  getNetwork() {
    return this.getTarget().getNetwork();
  }
  getSupportNetworks() {
    return UNISAT_SUPPORT_NETWORKS;
  }
  onAccountsChanged(callback) {
    this.getTarget().on("accountsChanged", callback);
  }
  removeAccountsChanged(callback) {
    this.getTarget().removeListener("accountsChanged", callback);
  }
  onNetworkChanged(callback) {
    this.getTarget().on("networkChanged", callback);
  }
  removeNetworkChanged(callback) {
    this.getTarget().removeListener("networkChanged", callback);
  }
  async sign(msg) {
    const msgStr = (0, import_rooch_sdk3.str)("utf8", msg);
    const sign = await this.getTarget().signMessage(msgStr);
    return (0, import_rooch_sdk3.bytes)("base64", sign).subarray(1);
  }
};

// src/wellet/okx.ts
var import_rooch_sdk4 = require("@roochnetwork/rooch-sdk");

// src/wellet/onekey.ts
var import_rooch_sdk5 = require("@roochnetwork/rooch-sdk");

// src/utils/walletUtils.ts
async function checkWallets(filter) {
  const wallets = [
    new UniSatWallet()
    // new OkxWallet(),
    // new OnekeyWallet(),
    // new OnekeyHardwareWallet(),
  ].filter((wallet) => wallet.getChain() === filter || !filter);
  return await Promise.all(wallets.filter(async (w) => await w.checkInstalled()));
}
//# sourceMappingURL=index.js.map
