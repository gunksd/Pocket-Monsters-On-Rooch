"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/wellet/util.ts
var util_exports = {};
__export(util_exports, {
  getRegisteredWallets: () => getRegisteredWallets
});
module.exports = __toCommonJS(util_exports);

// src/wellet/wallets.ts
var wallets = void 0;
var registered = /* @__PURE__ */ new Set();
var listeners = {};
function getWallets() {
  if (wallets)
    return wallets;
  wallets = Object.freeze({ register, get, on });
  return wallets;
}
function register(...wallets2) {
  wallets2.forEach((wallet) => registered.add(wallet));
  listeners["register"]?.forEach((listener) => guard(() => listener(...wallets2)));
  return function unregister() {
    wallets2.forEach((wallet) => registered.delete(wallet));
    listeners["unregister"]?.forEach((listener) => guard(() => listener(...wallets2)));
  };
}
function get() {
  return [...registered];
}
function on(event, listener) {
  listeners[event]?.push(listener) || (listeners[event] = [listener]);
  return function off() {
    listeners[event] = listeners[event]?.filter((existingListener) => listener !== existingListener);
  };
}
function guard(callback) {
  try {
    callback();
  } catch (error) {
    console.error(error);
  }
}

// src/wellet/util.ts
function getRegisteredWallets(preferredWallets, walletFilter) {
  const walletsApi = getWallets();
  const wallets2 = walletsApi.get();
  const Wallets = wallets2.filter((wallet) => !walletFilter || walletFilter(wallet));
  return [
    // Preferred wallets, in order:
    ...preferredWallets.map((name) => Wallets.find((wallet) => wallet.getName() === name)),
    // Wallets in default order:
    ...Wallets.filter((wallet) => !preferredWallets.includes(wallet.getName()))
  ].filter((wallet) => wallet !== void 0);
}
//# sourceMappingURL=util.js.map
