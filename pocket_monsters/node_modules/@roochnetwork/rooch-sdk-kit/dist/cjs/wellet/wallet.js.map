{
  "version": 3,
  "sources": ["../../../src/wellet/wallet.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ThirdPartyAddress, Bytes, Signer } from '@roochnetwork/rooch-sdk'\n\nimport { SupportChain } from '../feature/index.js'\n\nexport abstract class Wallet extends Signer {\n  protected address: ThirdPartyAddress[] | undefined\n  protected publicKey: string | undefined\n  protected currentAddress: ThirdPartyAddress | undefined\n\n  /**\n   * Connects the wallet.\n   * @returns A promise that resolves to an array of wallet accounts.\n   */\n  abstract connect(): Promise<ThirdPartyAddress[]>\n\n  abstract getName(): string\n  /**\n   * Signs a message.\n   * @param msg - The message to sign.\n   * @returns A promise that resolves to the signature string.\n   */\n  abstract sign(msg: Bytes): Promise<Bytes>\n\n  /**\n   * Switches the network.\n   */\n  abstract switchNetwork(network: string): void\n\n  /**\n   * Switches the account.\n   * Note: Wallets with Bitcoin chain are not currently supported.\n   */\n  abstract switchAccount(address: string): void\n\n  /**\n   * Retrieves the current network of the wallet.\n   * @returns The current network as a string.\n   */\n  abstract getNetwork(): string\n\n  /**\n   * Retrieves the supported networks of the wallet.\n   * @returns An array of supported network strings.\n   */\n  abstract getSupportNetworks(): string[]\n\n  /**\n   * Registers a callback function to be invoked when accounts are changed.\n   * @param callback - A function to be called when accounts are changed. It receives an array of account strings as its argument.\n   */\n  abstract onAccountsChanged(callback: (accounts: Array<string>) => void): void\n\n  /**\n   * Removes a previously registered callback function for account changes.\n   * @param callback - The callback function to be removed.\n   */\n  abstract removeAccountsChanged(callback: (accounts: Array<string>) => void): void\n\n  /**\n   * Registers a callback function to be invoked when the network is changed.\n   * @param callback - A function to be called when the network is changed. It receives the new network as its argument.\n   */\n  abstract onNetworkChanged(callback: (network: string) => void): void\n\n  /**\n   * Removes a previously registered callback function for network changes.\n   * @param callback - The callback function to be removed.\n   */\n  abstract removeNetworkChanged(callback: (network: string) => void): void\n\n  /**\n   * Retrieves the target of the wallet.\n   * @returns The target of the wallet.\n   */\n  abstract getTarget(): any\n\n  abstract getChain(): SupportChain\n\n  /**\n   * Normalizes the recovery ID.\n   * @param recoveryID - The recovery ID to be normalized.\n   * @returns The normalized recovery ID as a number.\n   */\n  protected abstract normalize_recovery_id(recoveryID: number): number\n\n  /**\n   * Checks if the wallet is installed.\n   * @returns A promise that resolves to true if the wallet is installed, otherwise false.\n   */\n  async checkInstalled(): Promise<boolean> {\n    for (let i = 1; i < 10 && !this.getTarget(); i += 1) {\n      await new Promise((resolve) => setTimeout(resolve, 100 * i))\n    }\n    return Promise.resolve(this.getTarget() !== undefined)\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,uBAAiD;AAI1C,IAAe,SAAf,cAA8B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAqF1C,MAAM,iBAAmC;AACvC,aAAS,IAAI,GAAG,IAAI,MAAM,CAAC,KAAK,UAAU,GAAG,KAAK,GAAG;AACnD,YAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,MAAM,CAAC,CAAC;AAAA,IAC7D;AACA,WAAO,QAAQ,QAAQ,KAAK,UAAU,MAAM,MAAS;AAAA,EACvD;AACF;",
  "names": []
}
