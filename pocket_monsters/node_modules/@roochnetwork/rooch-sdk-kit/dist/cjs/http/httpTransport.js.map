{
  "version": 3,
  "sources": ["../../../src/http/httpTransport.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  RoochHTTPTransport,\n  RoochTransportRequestOptions,\n  RoochHTTPTransportOptions,\n  ErrorValidateInvalidAccountAuthKey,\n  ErrorValidateSessionIsExpired,\n} from '@roochnetwork/rooch-sdk'\n\ntype SessionExpiredCallbackType = () => void\n\nexport class HTTPTransport extends RoochHTTPTransport {\n  private readonly sessionExpiredCallback: SessionExpiredCallbackType\n\n  constructor(\n    options: RoochHTTPTransportOptions,\n    sessionExpiredCallback: SessionExpiredCallbackType,\n  ) {\n    super(options)\n    this.sessionExpiredCallback = sessionExpiredCallback\n  }\n\n  async request<T>(input: RoochTransportRequestOptions): Promise<T> {\n    let result: T\n    try {\n      result = await super.request(input)\n      return result\n    } catch (e: any) {\n      if (\n        'code' in e &&\n        (e.code === ErrorValidateInvalidAccountAuthKey || e.code === ErrorValidateSessionIsExpired)\n      ) {\n        this.sessionExpiredCallback()\n      }\n      throw e\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,uBAMO;AAIA,IAAM,gBAAN,cAA4B,oCAAmB;AAAA,EAGpD,YACE,SACA,wBACA;AACA,UAAM,OAAO;AACb,SAAK,yBAAyB;AAAA,EAChC;AAAA,EAEA,MAAM,QAAW,OAAiD;AAChE,QAAI;AACJ,QAAI;AACF,eAAS,MAAM,MAAM,QAAQ,KAAK;AAClC,aAAO;AAAA,IACT,SAAS,GAAP;AACA,UACE,UAAU,MACT,EAAE,SAAS,uDAAsC,EAAE,SAAS,iDAC7D;AACA,aAAK,uBAAuB;AAAA,MAC9B;AACA,YAAM;AAAA,IACR;AAAA,EACF;AACF;",
  "names": []
}
