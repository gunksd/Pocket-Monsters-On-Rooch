{
  "version": 3,
  "sources": ["../../../../src/keypairs/ed25519/ed25519-hd-key.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\n// This is adapted from https://github.com/alepop/ed25519-hd-key replacing create-hmac\n// with @noble/hashes to be browser compatible.\n\nimport nacl from 'tweetnacl'\nimport { hmac } from '@noble/hashes/hmac'\n\nimport { Bytes } from '../../types/index.js'\nimport { fromHEX, sha512 } from '../../utils/index.js'\n\ntype Hex = string\ntype Path = string\n\ntype Keys = {\n  key: Bytes\n  chainCode: Bytes\n}\n\nconst ED25519_CURVE = 'ed25519 seed'\nconst HARDENED_OFFSET = 0x80000000\n\nexport const pathRegex = /^m(\\/[0-9]+')+$/\n\n// eslint-disable-next-line quotes\nexport const replaceDerive = (val: string): string => val.replace(\"'\", '')\n\nexport const getMasterKeyFromSeed = (seed: Hex): Keys => {\n  const h = hmac.create(sha512, ED25519_CURVE)\n  const I = h.update(fromHEX(seed)).digest()\n  const IL = I.slice(0, 32)\n  const IR = I.slice(32)\n  return {\n    key: IL,\n    chainCode: IR,\n  }\n}\n\nconst CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\n  const indexBuffer = new ArrayBuffer(4)\n  const cv = new DataView(indexBuffer)\n  cv.setUint32(0, index)\n\n  const data = new Uint8Array(1 + key.length + indexBuffer.byteLength)\n  data.set(new Uint8Array(1).fill(0))\n  data.set(key, 1)\n  data.set(new Uint8Array(indexBuffer, 0, indexBuffer.byteLength), key.length + 1)\n\n  const I = hmac.create(sha512, chainCode).update(data).digest()\n  const IL = I.slice(0, 32)\n  const IR = I.slice(32)\n  return {\n    key: IL,\n    chainCode: IR,\n  }\n}\n\nexport const getPublicKey = (privateKey: Uint8Array, withZeroByte = true): Uint8Array => {\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey)\n  const signPk = keyPair.secretKey.subarray(32)\n  const newArr = new Uint8Array(signPk.length + 1)\n  newArr.set([0])\n  newArr.set(signPk, 1)\n  return withZeroByte ? newArr : signPk\n}\n\nexport const isValidPath = (path: string): boolean => {\n  if (!pathRegex.test(path)) {\n    return false\n  }\n  return !path\n    .split('/')\n    .slice(1)\n    .map(replaceDerive)\n    .some(Number.isNaN as any /* ts T_T */)\n}\n\nexport const derivePath = (path: Path, seed: Hex, offset = HARDENED_OFFSET): Keys => {\n  if (!isValidPath(path)) {\n    throw new Error('Invalid derivation path')\n  }\n\n  const { key, chainCode } = getMasterKeyFromSeed(seed)\n  const segments = path\n    .split('/')\n    .slice(1)\n    .map(replaceDerive)\n    .map((el) => parseInt(el, 10))\n\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n    key,\n    chainCode,\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,uBAAiB;AACjB,kBAAqB;AAGrB,mBAAgC;AAUhC,MAAM,gBAAgB;AACtB,MAAM,kBAAkB;AAEjB,MAAM,YAAY;AAGlB,MAAM,gBAAgB,CAAC,QAAwB,IAAI,QAAQ,KAAK,EAAE;AAElE,MAAM,uBAAuB,CAAC,SAAoB;AACvD,QAAM,IAAI,iBAAK,OAAO,qBAAQ,aAAa;AAC3C,QAAM,IAAI,EAAE,WAAO,sBAAQ,IAAI,CAAC,EAAE,OAAO;AACzC,QAAM,KAAK,EAAE,MAAM,GAAG,EAAE;AACxB,QAAM,KAAK,EAAE,MAAM,EAAE;AACrB,SAAO;AAAA,IACL,KAAK;AAAA,IACL,WAAW;AAAA,EACb;AACF;AAEA,MAAM,UAAU,CAAC,EAAE,KAAK,UAAU,GAAS,UAAwB;AACjE,QAAM,cAAc,IAAI,YAAY,CAAC;AACrC,QAAM,KAAK,IAAI,SAAS,WAAW;AACnC,KAAG,UAAU,GAAG,KAAK;AAErB,QAAM,OAAO,IAAI,WAAW,IAAI,IAAI,SAAS,YAAY,UAAU;AACnE,OAAK,IAAI,IAAI,WAAW,CAAC,EAAE,KAAK,CAAC,CAAC;AAClC,OAAK,IAAI,KAAK,CAAC;AACf,OAAK,IAAI,IAAI,WAAW,aAAa,GAAG,YAAY,UAAU,GAAG,IAAI,SAAS,CAAC;AAE/E,QAAM,IAAI,iBAAK,OAAO,qBAAQ,SAAS,EAAE,OAAO,IAAI,EAAE,OAAO;AAC7D,QAAM,KAAK,EAAE,MAAM,GAAG,EAAE;AACxB,QAAM,KAAK,EAAE,MAAM,EAAE;AACrB,SAAO;AAAA,IACL,KAAK;AAAA,IACL,WAAW;AAAA,EACb;AACF;AAEO,MAAM,eAAe,CAAC,YAAwB,eAAe,SAAqB;AACvF,QAAM,UAAU,iBAAAA,QAAK,KAAK,QAAQ,SAAS,UAAU;AACrD,QAAM,SAAS,QAAQ,UAAU,SAAS,EAAE;AAC5C,QAAM,SAAS,IAAI,WAAW,OAAO,SAAS,CAAC;AAC/C,SAAO,IAAI,CAAC,CAAC,CAAC;AACd,SAAO,IAAI,QAAQ,CAAC;AACpB,SAAO,eAAe,SAAS;AACjC;AAEO,MAAM,cAAc,CAAC,SAA0B;AACpD,MAAI,CAAC,UAAU,KAAK,IAAI,GAAG;AACzB,WAAO;AAAA,EACT;AACA,SAAO,CAAC,KACL,MAAM,GAAG,EACT,MAAM,CAAC,EACP,IAAI,aAAa,EACjB;AAAA,IAAK,OAAO;AAAA;AAAA,EAAyB;AAC1C;AAEO,MAAM,aAAa,CAAC,MAAY,MAAW,SAAS,oBAA0B;AACnF,MAAI,CAAC,YAAY,IAAI,GAAG;AACtB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAEA,QAAM,EAAE,KAAK,UAAU,IAAI,qBAAqB,IAAI;AACpD,QAAM,WAAW,KACd,MAAM,GAAG,EACT,MAAM,CAAC,EACP,IAAI,aAAa,EACjB,IAAI,CAAC,OAAO,SAAS,IAAI,EAAE,CAAC;AAE/B,SAAO,SAAS,OAAO,CAAC,YAAY,YAAY,QAAQ,YAAY,UAAU,MAAM,GAAG;AAAA,IACrF;AAAA,IACA;AAAA,EACF,CAAC;AACH;",
  "names": ["nacl"]
}
