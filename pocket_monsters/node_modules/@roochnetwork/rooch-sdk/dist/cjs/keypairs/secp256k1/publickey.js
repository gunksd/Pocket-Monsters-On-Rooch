"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var publickey_exports = {};
__export(publickey_exports, {
  Secp256k1PublicKey: () => Secp256k1PublicKey
});
module.exports = __toCommonJS(publickey_exports);
var import_base = require("@scure/base");
var import_secp256k1 = require("@noble/curves/secp256k1");
var import_address = require("../../address/index.js");
var import_crypto = require("../../crypto/index.js");
var import_types = require("../../types/index.js");
var import_utils = require("../../utils/index.js");
const SCHNORR_PUBLIC_KEY_SIZE = 32;
class Secp256k1PublicKey extends import_crypto.PublicKey {
  /**
   * Create a new Secp256k1PublicKey object
   * @param value secp256k1 public key as buffer or base-64 encoded string
   */
  constructor(value) {
    super();
    if (typeof value === "string") {
      this.data = (0, import_utils.fromB64)(value);
    } else if (value instanceof Uint8Array) {
      this.data = value;
    } else {
      this.data = Uint8Array.from(value);
    }
    if (this.data.length !== SCHNORR_PUBLIC_KEY_SIZE && this.data.length !== 33) {
      throw new Error(
        `Invalid public key input. Expected ${SCHNORR_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`
      );
    }
  }
  /**
   * Checks if two Secp256k1 public keys are equal
   */
  equals(publicKey) {
    return super.equals(publicKey);
  }
  /**
   * Return the byte array representation of the Secp256k1 public key
   */
  toBytes() {
    return this.data;
  }
  toString() {
    return (0, import_utils.toHEX)(this.data);
  }
  /**
   * Return the Bitcoin address associated with this Secp256k1 public key
   */
  toAddress() {
    const tapTweak = (a, b) => {
      const u2 = import_secp256k1.schnorr.utils;
      const t2 = u2.taggedHash("TapTweak", a, b);
      const tn = u2.bytesToNumberBE(t2);
      if (tn >= import_secp256k1.secp256k1.CURVE.n)
        throw new Error("tweak higher than curve order");
      return tn;
    };
    const u = import_secp256k1.schnorr.utils;
    const t = tapTweak(this.data, import_types.EmptyBytes);
    const P = u.lift_x(u.bytesToNumberBE(this.data));
    const Q = P.add(import_secp256k1.secp256k1.ProjectivePoint.fromPrivateKey(t));
    const tweakedPubkey = u.pointToBytes(Q);
    return new import_address.BitcoinAddress(import_base.bech32m.encode("tb", [1].concat(import_base.bech32m.toWords(tweakedPubkey))));
  }
  /**
   * Return the Rooch address associated with this Secp256k1 public key
   */
  flag() {
    return import_crypto.SIGNATURE_SCHEME_TO_FLAG["Secp256k1"];
  }
  /**
   * Verifies that the signature is valid for the provided message
   */
  async verify(message, signature) {
    return import_secp256k1.secp256k1.verify(
      import_secp256k1.secp256k1.Signature.fromCompact(signature),
      (0, import_utils.sha256)(message),
      this.toBytes()
    );
  }
}
Secp256k1PublicKey.SIZE = SCHNORR_PUBLIC_KEY_SIZE;
//# sourceMappingURL=publickey.js.map
