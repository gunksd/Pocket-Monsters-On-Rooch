{
  "version": 3,
  "sources": ["../../../../src/client/types/params.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n *  ######################################\n *  ### DO NOT EDIT THIS FILE DIRECTLY ###\n *  ######################################\n *\n * This file is generated from:\n * /crates/rooch-open-rpc-spec/openrpc.json\n */\n\nimport type * as RpcTypes from './generated.js'\n/** Broadcast a Bitcoin transaction */\nexport interface BroadcastTXParams {\n  hex: string\n  maxfeerate?: number | null | undefined\n  maxburnamount?: number | null | undefined\n}\n/** Query the Inscription via global index by Inscription filter */\nexport interface QueryInscriptionsParams {\n  filter: RpcTypes.InscriptionFilterView\n  cursor?: RpcTypes.IndexerStateIDView | null | undefined\n  limit?: string | null | undefined\n  descendingOrder?: boolean | null | undefined\n}\n/** Query the UTXO via global index by UTXO filter */\nexport interface QueryUTXOsParams {\n  filter: RpcTypes.UTXOFilterView\n  cursor?: RpcTypes.IndexerStateIDView | null | undefined\n  limit?: string | null | undefined\n  descendingOrder?: boolean | null | undefined\n}\n/**\n * Send the signed transaction in bcs hex format This method blocks waiting for the transaction to be\n * executed.\n */\nexport interface ExecuteRawTransactionParams {\n  txBcsHex: string\n  txOption?: RpcTypes.TxOptions | null | undefined\n}\n/** Execute a read-only function call The function do not change the state of Application */\nexport interface ExecuteViewFunctionParams {\n  functionCall: RpcTypes.FunctionCallView\n}\n/** get account balance by RoochAddress and CoinType */\nexport interface GetBalanceParams {\n  owner: string\n  coinType: string\n}\n/** get account balances by RoochAddress */\nexport interface GetBalancesParams {\n  owner: string\n  cursor?: RpcTypes.IndexerStateIDView | null | undefined\n  limit?: string | null | undefined\n}\nexport interface GetChainIDParams {}\n/** Get the events by event handle id */\nexport interface GetEventsByEventHandleParams {\n  eventHandleType: string\n  cursor?: string | null | undefined\n  limit?: string | null | undefined\n  descendingOrder?: boolean | null | undefined\n  eventOptions?: RpcTypes.EventOptions | null | undefined\n}\n/** Get Object Fields via ObjectID and field keys. */\nexport interface GetFieldStatesParams {\n  objectId: string\n  fieldKey: string[]\n  stateOption?: RpcTypes.StateOptions | null | undefined\n}\n/** get module ABI by module id */\nexport interface GetModuleABIParams {\n  moduleAddr: string\n  moduleName: string\n}\n/** Get object states by object id */\nexport interface GetObjectStatesParams {\n  objectIds: string\n  stateOption?: RpcTypes.StateOptions | null | undefined\n}\n/**\n * Get the states by access_path If the StateOptions.decode is true, the state is decoded and the\n * decoded value is returned in the response.\n */\nexport interface GetStatesParams {\n  accessPath: string\n  stateOption?: RpcTypes.StateOptions | null | undefined\n}\nexport interface GetTransactionsByHashParams {\n  txHashes: string[]\n}\nexport interface GetTransactionsByOrderParams {\n  cursor?: string | null | undefined\n  limit?: string | null | undefined\n  descendingOrder?: boolean | null | undefined\n}\n/** List Object Fields via ObjectID. */\nexport interface ListFieldStatesParams {\n  objectId: string\n  cursor?: string | null | undefined\n  limit?: string | null | undefined\n  stateOption?: RpcTypes.StateOptions | null | undefined\n}\n/**\n * List the states by access_path If the StateOptions.decode is true, the state is decoded and the\n * decoded value is returned in the response.\n */\nexport interface ListStatesParams {\n  accessPath: string\n  cursor?: string | null | undefined\n  limit?: string | null | undefined\n  stateOption?: RpcTypes.StateOptions | null | undefined\n}\n/** Query the events indexer by event filter */\nexport interface QueryEventsParams {\n  filter: RpcTypes.EventFilterView\n  cursor?: RpcTypes.IndexerEventIDView | null | undefined\n  limit?: string | null | undefined\n  queryOption?: RpcTypes.QueryOptions | null | undefined\n}\n/** Query the object states indexer by state filter */\nexport interface QueryObjectStatesParams {\n  filter: RpcTypes.ObjectStateFilterView\n  cursor?: RpcTypes.IndexerStateIDView | null | undefined\n  limit?: string | null | undefined\n  queryOption?: RpcTypes.QueryOptions | null | undefined\n}\n/** Query the transactions indexer by transaction filter */\nexport interface QueryTransactionsParams {\n  filter: RpcTypes.TransactionFilterView\n  cursor?: string | null | undefined\n  limit?: string | null | undefined\n  queryOption?: RpcTypes.QueryOptions | null | undefined\n}\n/**\n * Send the signed transaction in bcs hex format This method does not block waiting for the transaction\n * to be executed.\n */\nexport interface SendRawTransactionParams {\n  txBcsHex: string\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
