{
  "version": 3,
  "sources": ["../../../../src/client/types/generated.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n *  ######################################\n *  ### DO NOT EDIT THIS FILE DIRECTLY ###\n *  ######################################\n *\n * This file is generated from:\n * /crates/rooch-open-rpc-spec/openrpc.json\n */\n\nexport interface AnnotatedFunctionResultView {\n  return_values?: AnnotatedFunctionReturnValueView[] | null\n  vm_status: VMStatusView\n}\nexport interface AnnotatedFunctionReturnValueView {\n  decoded_value: AnnotatedMoveValueView\n  value: FunctionReturnValueView\n}\nexport interface AnnotatedMoveStructView {\n  abilities: number\n  type: string\n  value: {\n    [key: string]: AnnotatedMoveValueView\n  }\n}\nexport type AnnotatedMoveValueView =\n  | number\n  | string\n  | string\n  | boolean\n  | string\n  | AnnotatedMoveValueView[]\n  | string\n  | AnnotatedMoveStructView\n  | SpecificStructView\n  | number\n  | number\n  | string\nexport interface BalanceInfoView {\n  balance: string\n  coin_type: string\n  decimals: number\n  name: string\n  supply: string\n  symbol: string\n}\nexport interface DisplayFieldsView {\n  fields: {\n    [key: string]: string\n  }\n}\nexport type EventFilterView =\n  /** Query by event type. */\n  | {\n      event_type: string\n    } /** Query by sender address. */\n  | {\n      sender: string\n    } /** Return events emitted by the given transaction hash. */\n  | {\n      tx_hash: string\n    } /** Return events emitted in [start_time, end_time) interval */\n  | {\n      time_range: {\n        /** right endpoint of time interval, milliseconds since block, exclusive */\n        end_time: string\n        /** left endpoint of time interval, milliseconds since block, inclusive */\n        start_time: string\n      }\n    } /** Return events emitted in [from_order, to_order) interval */\n  | {\n      tx_order_range: {\n        /** left endpoint of transaction order, inclusive */\n        from_order: string\n        /** right endpoint of transaction order, exclusive */\n        to_order: string\n      }\n    }\nexport interface EventIDView {\n  /** each event handle corresponds to a unique event handle id. event handler id equal to guid. */\n  event_handle_id: string\n  /** For expansion: The number of messages that have been emitted to the path previously */\n  event_seq: string\n}\nexport interface EventOptions {\n  /** If true, the event is decoded and the decoded value is returned in the response. */\n  decode?: boolean\n}\nexport interface EventView {\n  decoded_event_data?: AnnotatedMoveStructView | null\n  event_data: string\n  event_id: EventIDView\n  event_index: string\n  event_type: string\n}\nexport interface ExecuteTransactionResponseView {\n  execution_info: TransactionExecutionInfoView\n  output?: TransactionOutputView | null\n  sequence_info: TransactionSequenceInfoView\n}\nexport interface FunctionCallView {\n  args: string[]\n  function_id: string\n  ty_args: string[]\n}\nexport interface FunctionReturnValueView {\n  type_tag: string\n  value: string\n}\nexport interface IndexerEventIDView {\n  event_index: string\n  tx_order: string\n}\nexport interface IndexerEventView {\n  created_at: string\n  decoded_event_data?: AnnotatedMoveStructView | null\n  event_data: string\n  event_id: EventIDView\n  event_type: string\n  indexer_event_id: IndexerEventIDView\n  sender: string\n  tx_hash: string\n}\nexport interface IndexerObjectStateView {\n  created_at: string\n  decoded_value?: AnnotatedMoveStructView | null\n  display_fields?: DisplayFieldsView | null\n  flag: number\n  id: string\n  object_type: string\n  owner: string\n  owner_bitcoin_address?: string | null\n  size: string\n  state_index: string\n  state_root?: string | null\n  tx_order: string\n  updated_at: string\n  /** bcs bytes of the Object. */\n  value: string\n}\nexport interface IndexerStateIDView {\n  state_index: string\n  tx_order: string\n}\nexport type InscriptionFilterView =\n  /** Query by owner, support rooch address and bitcoin address */\n  | {\n      owner: string\n    } /** Query by inscription id, represent by bitcoin txid and index */\n  | {\n      inscription_id: {\n        index: number\n        txid: string\n      }\n    } /** Query by object id. */\n  | {\n      object_id: string\n    }\n  | 'all'\nexport interface InscriptionStateView {\n  created_at: string\n  flag: number\n  id: string\n  object_type: string\n  owner: string\n  owner_bitcoin_address?: string | null\n  size: string\n  state_index: string\n  state_root?: string | null\n  tx_order: string\n  updated_at: string\n  value: InscriptionView\n}\nexport interface InscriptionView {\n  bitcoin_txid: string\n  body: string\n  content_encoding?: string | null\n  content_type?: string | null\n  index: number\n  inscription_number: number\n  is_curse: boolean\n  metadata: string\n  metaprotocol?: string | null\n  offset: string\n  parents: string\n  pointer?: string | null\n  sequence_number: number\n  txid: string\n}\nexport type KeptVMStatusView =\n  | {\n      type: 'executed'\n    }\n  | {\n      type: 'outofgas'\n    }\n  | {\n      abort_code: string\n      location: string\n      type: 'moveabort'\n    }\n  | {\n      code_offset: number\n      function: number\n      location: string\n      type: 'executionfailure'\n    }\n  | {\n      type: 'miscellaneouserror'\n    }\nexport interface LedgerTransactionView {\n  data: LedgerTxDataView\n  sequence_info: TransactionSequenceInfoView\n}\nexport type LedgerTxDataView =\n  | {\n      block_hash: string\n      block_height: string\n      chain_id: string\n      type: 'l1_block'\n    }\n  | {\n      bitcoin_block_hash?: string | null\n      bitcoin_txid?: string | null\n      block_hash: string\n      chain_id: string\n      txid: string\n      type: 'l1_tx'\n    }\n  | {\n      action: MoveActionView\n      action_type: MoveActionTypeView\n      raw: string\n      sender: string\n      sender_bitcoin_address?: string | null\n      sequence_number: string\n      type: 'l2_tx'\n    }\n/** A Move module ABI */\nexport interface ModuleABIView {\n  address: string\n  /** Friends of the module */\n  friends: string[]\n  /** Public or entry functions of the module */\n  functions: MoveFunctionView[]\n  name: string\n  /** Structs of the module */\n  structs: MoveStructView[]\n}\nexport type MoveActionTypeView = 'scriptcall' | 'functioncall' | 'modulebundle'\nexport interface MoveActionView {\n  function_call?: FunctionCallView | null\n  module_bundle?: string[] | null\n  script_call?: ScriptCallView | null\n}\nexport interface MoveAsciiString {\n  bytes: number[]\n}\n/** Move function generic type param */\nexport interface MoveFunctionTypeParamView {\n  /** Move abilities tied to the generic type param and associated with the function that uses it */\n  constraints: string[]\n}\n/** Move function */\nexport interface MoveFunctionView {\n  /** Whether the function can be called as an entry function directly in a transaction */\n  is_entry: boolean\n  name: string\n  /** Parameters associated with the move function */\n  params: string[]\n  /** Return type of the function */\n  return: string[]\n  /** Generic type params associated with the Move function */\n  type_params: MoveFunctionTypeParamView[]\n}\nexport interface MoveString {\n  bytes: number[]\n}\n/** Move struct field */\nexport interface MoveStructFieldView {\n  name: string\n  type: string\n}\n/** Move generic type param */\nexport interface MoveStructTypeParamView {\n  /** Move abilities tied to the generic type param and associated with the type that uses it */\n  constraints: string[]\n  /** Whether the type is a phantom type */\n  is_phantom: boolean\n}\n/** A move struct */\nexport interface MoveStructView {\n  /** Abilities associated with the struct */\n  abilities: string[]\n  /** Fields associated with the struct */\n  fields: MoveStructFieldView[]\n  /** Whether the struct is a native struct of Move */\n  is_native: boolean\n  name: string\n  /** Generic types associated with the struct */\n  type_params: MoveStructTypeParamView[]\n}\nexport interface ObjectChangeView {\n  fields: ObjectChangeView[]\n  metadata: ObjectMetaView\n  value?: OpView | null\n}\nexport interface ObjectMetaView {\n  created_at: string\n  flag: number\n  id: string\n  object_type: string\n  owner: string\n  owner_bitcoin_address?: string | null\n  size: string\n  state_root?: string | null\n  updated_at: string\n}\nexport type ObjectStateFilterView =\n  /** Query by object value type and owner. */\n  | {\n      object_type_with_owner: {\n        filter_out: boolean\n        object_type: string\n        owner: string\n      }\n    } /** Query by object value type. */\n  | {\n      object_type: string\n    } /** Query by owner. */\n  | {\n      owner: string\n    } /** Query by object ids. */\n  | {\n      object_id: string\n    }\n/** Object state view. Used as return type of `getObjectStates`. */\nexport interface ObjectStateView {\n  created_at: string\n  decoded_value?: AnnotatedMoveStructView | null\n  display_fields?: DisplayFieldsView | null\n  flag: number\n  id: string\n  object_type: string\n  owner: string\n  owner_bitcoin_address?: string | null\n  size: string\n  state_root?: string | null\n  updated_at: string\n  value: string\n}\nexport type OpView =\n  | 'delete'\n  | {\n      new: string\n    }\n  | {\n      modify: string\n    }\n/**\n * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the\n * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first\n * item.\n */\nexport interface PaginatedBalanceInfoViews {\n  data: BalanceInfoView[]\n  has_next_page: boolean\n  next_cursor?: IndexerStateIDView | null\n}\n/**\n * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the\n * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first\n * item.\n */\nexport interface PaginatedEventViews {\n  data: EventView[]\n  has_next_page: boolean\n  next_cursor?: string | null\n}\n/**\n * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the\n * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first\n * item.\n */\nexport interface PaginatedIndexerEventViews {\n  data: IndexerEventView[]\n  has_next_page: boolean\n  next_cursor?: IndexerEventIDView | null\n}\n/**\n * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the\n * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first\n * item.\n */\nexport interface PaginatedIndexerObjectStateViews {\n  data: IndexerObjectStateView[]\n  has_next_page: boolean\n  next_cursor?: IndexerStateIDView | null\n}\n/**\n * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the\n * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first\n * item.\n */\nexport interface PaginatedInscriptionStateViews {\n  data: InscriptionStateView[]\n  has_next_page: boolean\n  next_cursor?: IndexerStateIDView | null\n}\n/**\n * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the\n * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first\n * item.\n */\nexport interface PaginatedStateKVViews {\n  data: StateKVView[]\n  has_next_page: boolean\n  next_cursor?: string | null\n}\n/**\n * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the\n * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first\n * item.\n */\nexport interface PaginatedTransactionWithInfoViews {\n  data: TransactionWithInfoView[]\n  has_next_page: boolean\n  next_cursor?: string | null\n}\n/**\n * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the\n * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first\n * item.\n */\nexport interface PaginatedUTXOStateViews {\n  data: UTXOStateView[]\n  has_next_page: boolean\n  next_cursor?: IndexerStateIDView | null\n}\nexport interface QueryOptions {\n  /** If true, the state is decoded and the decoded value is returned in the response. */\n  decode?: boolean\n  /** If true, return query items in descending order. */\n  descending?: boolean\n  /** If true, result with display rendered is returned */\n  showDisplay?: boolean\n}\nexport interface ScriptCallView {\n  args: string[]\n  code: string\n  ty_args: string[]\n}\n/** Some specific struct that we want to display in a special way for better readability */\nexport type SpecificStructView = MoveString | MoveAsciiString | string\nexport interface StateChangeSetView {\n  changes: ObjectChangeView[]\n  global_size: string\n  state_root: string\n}\nexport interface StateKVView {\n  field_key: string\n  state: ObjectStateView\n}\nexport interface StateOptions {\n  /** If true, the state is decoded and the decoded value is returned in the response. */\n  decode?: boolean\n  /** If true, result with display rendered is returned */\n  showDisplay?: boolean\n}\nexport interface TransactionExecutionInfoView {\n  event_root: string\n  gas_used: string\n  state_root: string\n  status: KeptVMStatusView\n  tx_hash: string\n}\nexport type TransactionFilterView =\n  /** Query by sender address. */\n  | {\n      sender: string\n    } /** Query by multi chain original address. */\n  | {\n      original_address: string\n    } /** Query by the given transaction hash. */\n  | {\n      tx_hashes: string[]\n    } /** Return transactions in [start_time, end_time) interval */\n  | {\n      time_range: {\n        /** right endpoint of time interval, milliseconds since block, exclusive */\n        end_time: string\n        /** left endpoint of time interval, milliseconds since block, inclusive */\n        start_time: string\n      }\n    } /** Return events emitted in [from_order, to_order) interval */\n  | {\n      tx_order_range: {\n        /** left endpoint of transaction order, inclusive */\n        from_order: string\n        /** right endpoint of transaction order, exclusive */\n        to_order: string\n      }\n    }\nexport interface TransactionOutputView {\n  changeset: StateChangeSetView\n  events: EventView[]\n  gas_used: string\n  is_upgrade: boolean\n  status: KeptVMStatusView\n}\nexport interface TransactionSequenceInfoView {\n  tx_accumulator_root: string\n  tx_order: string\n  tx_order_signature: string\n  tx_timestamp: string\n}\nexport interface TransactionWithInfoView {\n  execution_info?: TransactionExecutionInfoView | null\n  transaction: LedgerTransactionView\n}\nexport interface TxOptions {\n  /**\n   * If true, the event is decoded and the decoded value is returned in the response. Only valid when\n   * with_output is true.\n   */\n  decode?: boolean\n  /** If true, the TransactionOutput is returned in the response. */\n  withOutput?: boolean\n}\nexport type UTXOFilterView =\n  /** Query by owner, support rooch address and bitcoin address */\n  | {\n      owner: string\n    } /** Query by bitcoin outpoint, represent by bitcoin txid and vout */\n  | {\n      out_point: {\n        txid: string\n        vout: number\n      }\n    } /** Query by object id. */\n  | {\n      object_id: string\n    }\n  | 'all'\nexport interface UTXOStateView {\n  created_at: string\n  flag: number\n  id: string\n  object_type: string\n  owner: string\n  owner_bitcoin_address?: string | null\n  size: string\n  state_index: string\n  state_root?: string | null\n  tx_order: string\n  updated_at: string\n  value: UTXOView\n}\nexport interface UTXOView {\n  /** The txid of the UTXO */\n  bitcoin_txid: string\n  /** Protocol seals */\n  seals: /** Protocol seals */\n  {\n    [key: string]: string[]\n  }\n  /** The txid of the UTXO */\n  txid: string\n  /** The value of the UTXO */\n  value: string\n  /** The vout of the UTXO */\n  vout: number\n}\nexport type VMStatusView =\n  | 'Executed'\n  | {\n      MoveAbort: {\n        abort_code: string\n        location: string\n      }\n    }\n  | {\n      ExecutionFailure: {\n        code_offset: number\n        function: number\n        location: string\n        status_code: string\n      }\n    }\n  | {\n      Error: string\n    }\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
