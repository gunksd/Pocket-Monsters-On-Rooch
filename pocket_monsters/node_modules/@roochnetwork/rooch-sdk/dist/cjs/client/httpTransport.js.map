{
  "version": 3,
  "sources": ["../../../src/client/httpTransport.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\n// import { PACKAGE_VERSION, TARGETED_RPC_VERSION } from '../version.js'\n\nimport { JsonRpcError, RoochHTTPStatusError } from './error.js'\n\nexport type HttpHeaders = { [header: string]: string }\n\nexport interface RoochHTTPTransportOptions {\n  fetch?: typeof fetch\n  url: string\n  rpc?: {\n    headers?: HttpHeaders\n    url?: string\n  }\n}\n\nexport interface RoochTransportRequestOptions {\n  method: string\n  params: unknown[]\n}\n\nexport interface RoochTransport {\n  request<T = unknown>(input: RoochTransportRequestOptions): Promise<T>\n}\n\nexport class RoochHTTPTransport implements RoochTransport {\n  #requestId = 0\n  #options: RoochHTTPTransportOptions\n\n  constructor(options: RoochHTTPTransportOptions) {\n    this.#options = options\n  }\n\n  fetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n    const fetchFn = this.#options.fetch ?? fetch\n\n    if (!fetchFn) {\n      throw new Error(\n        'The current environment does not support fetch, you can provide a fetch implementation in the options for RoochHTTPTransport.',\n      )\n    }\n\n    return fetchFn(input, init)\n  }\n\n  async request<T>(input: RoochTransportRequestOptions): Promise<T> {\n    this.#requestId += 1\n\n    const res = await this.fetch(this.#options.rpc?.url ?? this.#options.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.#options.rpc?.headers,\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: this.#requestId,\n        method: input.method,\n        params: input.params,\n      }),\n    })\n\n    if (!res.ok) {\n      throw new RoochHTTPStatusError(\n        `Unexpected status code: ${res.status}`,\n        res.status,\n        res.statusText,\n      )\n    }\n\n    const data = await res.json()\n\n    if ('error' in data && data.error != null) {\n      throw new JsonRpcError(data.error.message, data.error.code)\n    }\n\n    return data.result\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,mBAAmD;AALnD;AA2BO,MAAM,mBAA6C;AAAA,EAIxD,YAAY,SAAoC;AAHhD,mCAAa;AACb;AAGE,uBAAK,UAAW;AAAA,EAClB;AAAA,EAEA,MAAM,OAAoB,MAAuC;AAC/D,UAAM,UAAU,mBAAK,UAAS,SAAS;AAEvC,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,WAAO,QAAQ,OAAO,IAAI;AAAA,EAC5B;AAAA,EAEA,MAAM,QAAW,OAAiD;AAChE,uBAAK,YAAL,mBAAK,cAAc;AAEnB,UAAM,MAAM,MAAM,KAAK,MAAM,mBAAK,UAAS,KAAK,OAAO,mBAAK,UAAS,KAAK;AAAA,MACxE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG,mBAAK,UAAS,KAAK;AAAA,MACxB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,IAAI,mBAAK;AAAA,QACT,QAAQ,MAAM;AAAA,QACd,QAAQ,MAAM;AAAA,MAChB,CAAC;AAAA,IACH,CAAC;AAED,QAAI,CAAC,IAAI,IAAI;AACX,YAAM,IAAI;AAAA,QACR,2BAA2B,IAAI;AAAA,QAC/B,IAAI;AAAA,QACJ,IAAI;AAAA,MACN;AAAA,IACF;AAEA,UAAM,OAAO,MAAM,IAAI,KAAK;AAE5B,QAAI,WAAW,QAAQ,KAAK,SAAS,MAAM;AACzC,YAAM,IAAI,0BAAa,KAAK,MAAM,SAAS,KAAK,MAAM,IAAI;AAAA,IAC5D;AAEA,WAAO,KAAK;AAAA,EACd;AACF;AApDE;AACA;",
  "names": []
}
