import { SerializedBcs } from '@mysten/bcs';
import { Bytes } from '../types/bytes.js';
import { u16, u32, u8, u64, u128, u256, bool, address, objectId } from '../types/index.js';
import { StructTag } from './types.js';
export type ArgType = 'u8' | 'u16' | 'u32' | 'u64' | 'u128' | 'u256' | 'bool' | 'string' | 'object' | 'objectId' | 'address';
export declare class Args {
    readonly value: Bytes;
    constructor(input: Bytes);
    encodeWithHex(): string;
    encode(): Bytes;
    static u8(input: u8): Args;
    static u16(input: u16): Args;
    static u32(input: u32): Args;
    static u64(input: u64): Args;
    static u128(input: u128): Args;
    static u256(input: u256): Args;
    static bool(input: bool): Args;
    static string(input: string): Args;
    static address(input: address): Args;
    static object(input: StructTag): Args;
    static objectId(input: objectId): Args;
    static struct(input: SerializedBcs<any> | Bytes): Args;
    static vec(type: ArgType, input: number[] | bigint[] | boolean[] | string[] | StructTag[]): Args;
}
