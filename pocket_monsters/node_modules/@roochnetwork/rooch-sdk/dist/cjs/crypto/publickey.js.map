{
  "version": 3,
  "sources": ["../../../src/crypto/publickey.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Bytes } from '../types/index.js'\nimport { Address } from '../address/index.js'\nimport { bytesEqual, toB64 } from '../utils/index.js'\n\n/**\n * Value to be converted into public key.\n */\nexport type PublicKeyInitData = string | Bytes | Iterable<number>\n\n/**\n * A public key\n */\nexport abstract class PublicKey<T extends Address> {\n  /**\n   * Checks if two public keys are equal\n   */\n  equals(publicKey: PublicKey<T>) {\n    return bytesEqual(this.toBytes(), publicKey.toBytes())\n  }\n\n  /**\n   * Return the base-64 representation of the public key\n   */\n  toBase64() {\n    return toB64(this.toBytes())\n  }\n\n  toString(): string {\n    throw new Error(\n      '`toString` is not implemented on public keys. Use `toBase64()` or `toBytes()` instead.',\n    )\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  abstract toBytes(): Uint8Array\n\n  /**\n   * Return signature scheme flag of the public key\n   */\n  abstract flag(): number\n\n  abstract toAddress(): T\n\n  /**\n   * Verifies that the signature is valid  for the provided message\n   */\n  abstract verify(data: Uint8Array, signature: Uint8Array | string): Promise<boolean>\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,mBAAkC;AAU3B,MAAe,UAA6B;AAAA;AAAA;AAAA;AAAA,EAIjD,OAAO,WAAyB;AAC9B,eAAO,yBAAW,KAAK,QAAQ,GAAG,UAAU,QAAQ,CAAC;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACT,eAAO,oBAAM,KAAK,QAAQ,CAAC;AAAA,EAC7B;AAAA,EAEA,WAAmB;AACjB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAkBF;",
  "names": []
}
