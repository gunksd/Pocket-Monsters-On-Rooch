import { bech32m } from "@scure/base";
import { schnorr, secp256k1 } from "@noble/curves/secp256k1";
import { BitcoinAddress } from "../../address/index.js";
import { PublicKey, SIGNATURE_SCHEME_TO_FLAG } from "../../crypto/index.js";
import { EmptyBytes } from "../../types/index.js";
import { fromB64, sha256, toHEX } from "../../utils/index.js";
const SCHNORR_PUBLIC_KEY_SIZE = 32;
class Secp256k1PublicKey extends PublicKey {
  /**
   * Create a new Secp256k1PublicKey object
   * @param value secp256k1 public key as buffer or base-64 encoded string
   */
  constructor(value) {
    super();
    if (typeof value === "string") {
      this.data = fromB64(value);
    } else if (value instanceof Uint8Array) {
      this.data = value;
    } else {
      this.data = Uint8Array.from(value);
    }
    if (this.data.length !== SCHNORR_PUBLIC_KEY_SIZE && this.data.length !== 33) {
      throw new Error(
        `Invalid public key input. Expected ${SCHNORR_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`
      );
    }
  }
  /**
   * Checks if two Secp256k1 public keys are equal
   */
  equals(publicKey) {
    return super.equals(publicKey);
  }
  /**
   * Return the byte array representation of the Secp256k1 public key
   */
  toBytes() {
    return this.data;
  }
  toString() {
    return toHEX(this.data);
  }
  /**
   * Return the Bitcoin address associated with this Secp256k1 public key
   */
  toAddress() {
    const tapTweak = (a, b) => {
      const u2 = schnorr.utils;
      const t2 = u2.taggedHash("TapTweak", a, b);
      const tn = u2.bytesToNumberBE(t2);
      if (tn >= secp256k1.CURVE.n)
        throw new Error("tweak higher than curve order");
      return tn;
    };
    const u = schnorr.utils;
    const t = tapTweak(this.data, EmptyBytes);
    const P = u.lift_x(u.bytesToNumberBE(this.data));
    const Q = P.add(secp256k1.ProjectivePoint.fromPrivateKey(t));
    const tweakedPubkey = u.pointToBytes(Q);
    return new BitcoinAddress(bech32m.encode("tb", [1].concat(bech32m.toWords(tweakedPubkey))));
  }
  /**
   * Return the Rooch address associated with this Secp256k1 public key
   */
  flag() {
    return SIGNATURE_SCHEME_TO_FLAG["Secp256k1"];
  }
  /**
   * Verifies that the signature is valid for the provided message
   */
  async verify(message, signature) {
    return secp256k1.verify(
      secp256k1.Signature.fromCompact(signature),
      sha256(message),
      this.toBytes()
    );
  }
}
Secp256k1PublicKey.SIZE = SCHNORR_PUBLIC_KEY_SIZE;
export {
  Secp256k1PublicKey
};
//# sourceMappingURL=publickey.js.map
