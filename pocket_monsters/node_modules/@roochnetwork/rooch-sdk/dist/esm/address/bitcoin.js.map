{
  "version": 3,
  "sources": ["../../../src/address/bitcoin.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bech32, bech32m } from '@scure/base'\n\nimport { bcs } from '../bcs/index.js'\nimport { Bytes } from '../types/index.js'\nimport { blake2b, bytes, isHex, validateWitness } from '../utils/index.js'\n\nimport { Address, ROOCH_ADDRESS_LENGTH } from './address.js'\nimport { RoochAddress } from './rooch.js'\nimport { MultiChainID } from './types.js'\nimport { ThirdPartyAddress } from './thirdparty-address.js'\nimport { Buffer } from 'buffer'\nimport bs58check from 'bs58check'\n\nexport enum BitcoinNetowkType {\n  Bitcoin,\n  /// Bitcoin's testnet network.\n  Testnet,\n  /// Bitcoin's signet network.\n  Signet,\n  /// Bitcoin's regtest network.\n  Regtest,\n}\n\nenum BitcoinAddressType {\n  pkh = 0,\n  sh = 1,\n  witness = 2,\n}\n\nconst PUBKEY_ADDRESS_PREFIX_MAIN = 0    // 0x00\nconst PUBKEY_ADDRESS_PREFIX_TEST = 111  // 0x6f\nconst SCRIPT_ADDRESS_PREFIX_MAIN = 5    // 0x05\nconst SCRIPT_ADDRESS_PREFIX_TEST = 196  // 0xc4\n\nexport class BitcoinNetwork {\n  private readonly network: BitcoinNetowkType\n\n  constructor(network?: BitcoinNetowkType) {\n    this.network = network ?? BitcoinNetowkType.Bitcoin\n  }\n\n  static fromBech32Prefix(prefix: string) {\n    switch (prefix) {\n      case 'bc' || 'BC':\n        return new BitcoinNetwork(BitcoinNetowkType.Bitcoin)\n      case 'tb' || 'TB':\n        return new BitcoinNetwork(BitcoinNetowkType.Testnet)\n      case 'bcrt' || 'bcrt':\n        return new BitcoinNetwork(BitcoinNetowkType.Regtest)\n      default:\n        return undefined\n    }\n  }\n\n  bech32HRP(): string {\n    switch (this.network) {\n      case BitcoinNetowkType.Bitcoin:\n        return 'bc'\n      case BitcoinNetowkType.Testnet:\n        return 'tb'\n      case BitcoinNetowkType.Signet:\n        return 'tb'\n      case BitcoinNetowkType.Regtest:\n        return 'bcrt'\n    }\n  }\n}\n\nexport class BitcoinAddress extends ThirdPartyAddress implements Address {\n  private readonly bytes: Bytes\n  private roochAddress: RoochAddress | undefined\n\n  constructor(input: string, network?: BitcoinNetowkType) {\n    super(input)\n\n    if (isHex(input)) {\n      this.bytes = bytes('hex', input.startsWith('0x') ? input.slice(2) : input)\n\n      let prefixed: Uint8Array\n      let version = this.bytes[1]\n\n      switch (this.bytes[0]) {\n        case BitcoinAddressType.pkh:\n          prefixed = new Uint8Array(22)\n          prefixed[0] = version\n          prefixed[1] = this.getPubkeyAddressPrefix(network)\n          prefixed.set(this.bytes.slice(2))\n          this.rawAddress = bs58check.encode(prefixed)\n          break\n        case BitcoinAddressType.sh:\n          prefixed = new Uint8Array(22)\n          prefixed[0] = version\n          prefixed[1] = this.getScriptAddressPrefix(network)\n          prefixed.set(this.bytes.slice(2))\n          this.rawAddress = bs58check.encode(prefixed)\n          break\n        case BitcoinAddressType.witness:\n          const hrp = new BitcoinNetwork(network).bech32HRP()\n          const words = bech32.toWords(Buffer.from(this.bytes.slice(2)))\n          words.unshift(version)\n          this.rawAddress = version === 0 ? bech32.encode(hrp, words) : bech32m.encode(hrp, words)\n      }\n    } else {\n      let info = this.decode()\n      this.bytes = this.wrapAddress(info.type, info.bytes, info.version)\n    }\n  }\n\n  private getPubkeyAddressPrefix(network: BitcoinNetowkType = BitcoinNetowkType.Bitcoin): number {\n    return network === BitcoinNetowkType.Bitcoin\n      ? PUBKEY_ADDRESS_PREFIX_MAIN\n      : PUBKEY_ADDRESS_PREFIX_TEST\n  }\n\n  private getScriptAddressPrefix(network: BitcoinNetowkType = BitcoinNetowkType.Bitcoin): number {\n    return network === BitcoinNetowkType.Bitcoin\n      ? SCRIPT_ADDRESS_PREFIX_MAIN\n      : SCRIPT_ADDRESS_PREFIX_TEST\n  }\n\n  toBytes(): Bytes {\n    return bytes('utf8', this.rawAddress)\n  }\n\n  genMultiChainAddress(): Bytes {\n    return bcs.MultiChainAddress.serialize({\n      multiChainId: MultiChainID.Bitcoin,\n      rawAddress: this.bytes,\n    }).toBytes()\n  }\n\n  genRoochAddress(): RoochAddress {\n    if (!this.roochAddress) {\n      this.roochAddress = new RoochAddress(blake2b(this.bytes, { dkLen: ROOCH_ADDRESS_LENGTH }))\n    }\n\n    return this.roochAddress\n  }\n\n  decode() {\n    let input = this.rawAddress\n    if (input.length < 14 || input.length > 74) throw new Error('Invalid address length')\n\n    const bech32_network = (() => {\n      const sep = input.lastIndexOf('1')\n      const bech32Prefix = sep === -1 ? input : input.substring(0, sep)\n\n      return BitcoinNetwork.fromBech32Prefix(bech32Prefix)\n    })()\n\n    if (bech32_network !== undefined) {\n      let res\n      try {\n        res = bech32.decode(input)\n        if (res.words[0] !== 0) throw new Error(`bech32: wrong version=${res.words[0]}`)\n      } catch (_) {\n        // Starting from version 1 it is decoded as bech32m\n        res = bech32m.decode(input)\n        if (res.words[0] === 0) throw new Error(`bech32m: wrong version=${res.words[0]}`)\n      }\n      const [version, ...program] = res.words\n      const data = bech32.fromWords(program)\n      validateWitness(version, data)\n      if (version === 0 && data.length === 32)\n        return {\n          bytes: data,\n          type: BitcoinAddressType.witness, //wsh\n          version: version,\n        }\n      else if (version === 0 && data.length === 20)\n        return {\n          bytes: data,\n          type: BitcoinAddressType.witness, //wpkh\n          version: version,\n        }\n      else if (version === 1 && data.length === 32)\n        return {\n          bytes: data,\n          type: BitcoinAddressType.witness, //tr\n          version: version,\n        }\n      else throw new Error('Unknown witness program')\n    }\n\n    const data = bs58check.decode(input)\n    if (data.length !== 21) throw new Error('Invalid base58 address')\n    // Pay To Public Key Hash\n    if (data[0] === 0x00) {\n      return {\n        bytes: data.slice(1),\n        type: BitcoinAddressType.pkh,\n      }\n    } else if (data[0] === 0x05) {\n      return { bytes: data.slice(1), type: BitcoinAddressType.sh }\n    }\n    throw new Error(`Invalid address prefix=${data[0]}`)\n  }\n\n  private wrapAddress(type: BitcoinAddressType, bytes: Uint8Array, version?: number): Uint8Array {\n    const addr = new Uint8Array(bytes.length + 1 + (version !== undefined ? 1 : 0))\n    addr.set([type])\n    if (version !== undefined) {\n      addr.set([version], 1)\n      addr.set(bytes, 2)\n    } else {\n      addr.set(bytes, 1)\n    }\n    return addr\n  }\n}\n"],
  "mappings": "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",
  "names": ["BitcoinNetowkType", "BitcoinAddressType", "data", "bytes"]
}
