{
  "version": 3,
  "sources": ["../../../src/session/session.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Args } from '../bcs/index.js'\nimport { RoochClient } from '../client/index.js'\nimport { Ed25519Keypair } from '../keypairs/index.js'\nimport { Transaction } from '../transactions/index.js'\nimport { BitcoinAddress, RoochAddress } from '../address/index.js'\nimport { Authenticator, PublicKey, SignatureScheme, Signer } from '../crypto/index.js'\n\nimport { CreateSessionArgs } from './types.js'\nimport { fromHEX } from '../utils/index.js'\nimport { Bytes } from '../types/index.js'\n\nconst DEFAULT_MAX_INACTIVE_INTERVAL = 1200 // second\nconst REQUIRED_SCOPE = '0x3::session_key::remove_session_key_entry'\n\ntype InnerCreateSessionArgs = {\n  client: RoochClient\n  signer: Signer\n} & CreateSessionArgs\n\nexport class Session extends Signer {\n  protected readonly appName: string\n  protected readonly appUrl: string\n  protected readonly scopes: string[]\n  protected readonly keypair: Ed25519Keypair\n  protected readonly maxInactiveInterval: number\n  protected readonly bitcoinAddress: BitcoinAddress\n  protected readonly roochAddress: RoochAddress\n  protected lastActiveTime: number\n\n  protected constructor(\n    appName: string,\n    appUrl: string,\n    scopes: string[],\n    roochAddress: RoochAddress,\n    bitcoinAddress: BitcoinAddress,\n    keypair?: Ed25519Keypair,\n    maxInactiveInterval?: number,\n    localCreateSessionTime?: number,\n    lastActiveTime?: number,\n  ) {\n    super()\n    this.appName = appName\n    this.appUrl = appUrl\n    this.scopes = scopes\n    this.roochAddress = roochAddress\n    this.bitcoinAddress = bitcoinAddress\n    this.keypair = keypair ?? Ed25519Keypair.generate()\n    this.maxInactiveInterval = maxInactiveInterval ?? DEFAULT_MAX_INACTIVE_INTERVAL\n    this.localCreateSessionTime = localCreateSessionTime ?? Date.now()\n    this.lastActiveTime = lastActiveTime || this.localCreateSessionTime\n  }\n\n  protected readonly localCreateSessionTime: number\n\n  public static async CREATE(input: InnerCreateSessionArgs): Promise<Session> {\n    const parsedScopes = input.scopes.map((scope) => {\n      if (typeof scope !== 'string') {\n        return `${scope.address}::${scope.module}::${scope.function}`\n      }\n      if (scope.split('::').length !== 3) throw Error('invalid scope')\n      return scope\n    })\n\n    const allOx3 = '0x3::*::*'\n\n    if (!parsedScopes.find((item) => item === allOx3 || item === REQUIRED_SCOPE)) {\n      parsedScopes.push(REQUIRED_SCOPE)\n    }\n    return new Session(\n      input.appName,\n      input.appUrl,\n      parsedScopes,\n      input.signer.getRoochAddress(),\n      input.signer.getBitcoinAddress(),\n      input.keypair,\n      input.maxInactiveInterval,\n    ).build(input.client, input.signer)\n  }\n\n  static fromJson(jsonObj: any) {\n    const {\n      appName,\n      appUrl,\n      scopes,\n      secretKey,\n      maxInactiveInterval,\n      bitcoinAddress,\n      roochAddress,\n      localCreateSessionTime,\n      lastActiveTime,\n    } = jsonObj\n\n    return new Session(\n      appName,\n      appUrl,\n      scopes,\n      new RoochAddress(roochAddress),\n      new BitcoinAddress(bitcoinAddress),\n      Ed25519Keypair.fromSecretKey(secretKey),\n      maxInactiveInterval,\n      localCreateSessionTime,\n      lastActiveTime,\n    )\n  }\n\n  sign(input: Bytes): Promise<Bytes> {\n    // if (this.lastActiveTime + this.maxInactiveInterval < Date.now() / 1000) {\n    //   throw Error('Session is Expired')\n    // }\n    this.lastActiveTime = Date.now()\n    return this.keypair.sign(input)\n  }\n\n  signTransaction(input: Transaction): Promise<Authenticator> {\n    return Authenticator.rooch(input.hashData(), this)\n  }\n\n  getRoochAddress(): RoochAddress {\n    return this.roochAddress\n  }\n\n  getBitcoinAddress(): BitcoinAddress {\n    return this.bitcoinAddress\n  }\n\n  getKeyScheme(): SignatureScheme {\n    return this.keypair.getKeyScheme()\n  }\n\n  getPublicKey(): PublicKey<RoochAddress> {\n    return this.keypair.getPublicKey()\n  }\n\n  getCreateTime(): number {\n    return this.localCreateSessionTime\n  }\n\n  getAuthKey(): string {\n    return this.keypair.getRoochAddress().toHexAddress()\n  }\n\n  protected async build(client: RoochClient, signer: Signer) {\n    const [addrs, mods, fns] = this.scopes\n      .map((scope) => {\n        return scope.split('::')\n      })\n      .reduce(\n        (acc: Array<Array<string>>, val: Array<string>) => {\n          acc[0].push(val[0])\n          acc[1].push(val[1])\n          acc[2].push(val[2])\n          return acc\n        },\n        [[], [], []],\n      )\n\n    const tx = new Transaction()\n    tx.callFunction({\n      target: '0x3::session_key::create_session_key_with_multi_scope_entry',\n      args: [\n        Args.string(this.appName),\n        Args.string(this.appUrl),\n        Args.vec('u8', Array.from(fromHEX(this.getAuthKey()))),\n        Args.vec('address', addrs),\n        Args.vec('string', mods),\n        Args.vec('string', fns),\n        Args.u64(BigInt(this.maxInactiveInterval)),\n      ],\n      info: `Welcome to ${this.appName}\\nYou will authorize session:\\n${\n        'Scope:\\n' + this.scopes.join('\\n') + '\\nTimeOut:' + this.maxInactiveInterval.toString()\n      }`,\n    })\n\n    const result = await client.signAndExecuteTransaction({\n      transaction: tx,\n      signer: signer,\n    })\n\n    if (result.execution_info.status.type === 'executed') {\n      return this\n    } else {\n      throw Error(`create session failed ${result.execution_info.status}`)\n    }\n  }\n\n  toJSON(): any {\n    return {\n      appName: this.appName,\n      appUrl: this.appUrl,\n      scopes: this.scopes,\n      secretKey: this.keypair.getSecretKey(),\n      maxInactiveInterval: this.maxInactiveInterval,\n      bitcoinAddress: this.bitcoinAddress.toStr(),\n      roochAddress: this.roochAddress.toStr(),\n      localCreateSessionTime: this.localCreateSessionTime,\n      lastActiveTime: this.lastActiveTime,\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
