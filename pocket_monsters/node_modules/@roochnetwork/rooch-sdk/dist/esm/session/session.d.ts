import { RoochClient } from '../client/index.js';
import { Ed25519Keypair } from '../keypairs/index.js';
import { Transaction } from '../transactions/index.js';
import { BitcoinAddress, RoochAddress } from '../address/index.js';
import { Authenticator, PublicKey, SignatureScheme, Signer } from '../crypto/index.js';
import { CreateSessionArgs } from './types.js';
import { Bytes } from '../types/index.js';
type InnerCreateSessionArgs = {
    client: RoochClient;
    signer: Signer;
} & CreateSessionArgs;
export declare class Session extends Signer {
    protected readonly appName: string;
    protected readonly appUrl: string;
    protected readonly scopes: string[];
    protected readonly keypair: Ed25519Keypair;
    protected readonly maxInactiveInterval: number;
    protected readonly bitcoinAddress: BitcoinAddress;
    protected readonly roochAddress: RoochAddress;
    protected lastActiveTime: number;
    protected constructor(appName: string, appUrl: string, scopes: string[], roochAddress: RoochAddress, bitcoinAddress: BitcoinAddress, keypair?: Ed25519Keypair, maxInactiveInterval?: number, localCreateSessionTime?: number, lastActiveTime?: number);
    protected readonly localCreateSessionTime: number;
    static CREATE(input: InnerCreateSessionArgs): Promise<Session>;
    static fromJson(jsonObj: any): Session;
    sign(input: Bytes): Promise<Bytes>;
    signTransaction(input: Transaction): Promise<Authenticator>;
    getRoochAddress(): RoochAddress;
    getBitcoinAddress(): BitcoinAddress;
    getKeyScheme(): SignatureScheme;
    getPublicKey(): PublicKey<RoochAddress>;
    getCreateTime(): number;
    getAuthKey(): string;
    protected build(client: RoochClient, signer: Signer): Promise<this>;
    toJSON(): any;
}
export {};
