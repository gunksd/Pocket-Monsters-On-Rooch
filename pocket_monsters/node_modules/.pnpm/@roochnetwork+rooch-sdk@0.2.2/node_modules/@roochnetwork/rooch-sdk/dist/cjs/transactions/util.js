"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var util_exports = {};
__export(util_exports, {
  normalizeTypeArgs: () => normalizeTypeArgs,
  normalizeTypeArgsToStr: () => normalizeTypeArgsToStr
});
module.exports = __toCommonJS(util_exports);
function normalizeTypeArgs(input) {
  if ("target" in input) {
    const data = input.target.split("::");
    if (data.length !== 3) {
      throw new Error("invalid type");
    }
    return data;
  }
  return [input.address, input.module, input.name];
}
function normalizeTypeArgsToStr(input) {
  if ("target" in input) {
    if (input.target.split("::").length !== 3) {
      throw new Error("invalid type");
    }
    return input.target;
  }
  return `${input.address}::${input.module}::${input.name}`;
}
//# sourceMappingURL=util.js.map
