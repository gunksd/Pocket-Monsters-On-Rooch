{
  "version": 3,
  "sources": ["../../../src/utils/hex.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Bytes } from '../types/bytes.js'\n\nexport function isHex(input: string | Bytes): boolean {\n  if (typeof input === 'string') {\n    return /^(0x|0X)?[a-fA-F0-9]+$/.test(input) && input.length % 2 === 0\n  } else {\n    for (let i = 0; i < input.length; i++) {\n      const byte = input[i]\n      // Check if the byte is a valid hex character (0-9, A-F, a-f)\n      if (\n        !((byte >= 48 && byte <= 57) || (byte >= 65 && byte <= 70) || (byte >= 97 && byte <= 102))\n      ) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nexport function getHexByteLength(input: string): number {\n  return /^(0x|0X)/.test(input) ? (input.length - 2) / 2 : input.length / 2\n}\n\nexport function normalizeHex(input: string): string {\n  return input.startsWith('0x') ? input.slice(2) : input\n}\n\nexport function fromHEX(input: string): Bytes {\n  const normalized = normalizeHex(input)\n  const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}}`\n  const intArr = padded.match(/.{2}/g)?.map((byte) => parseInt(byte, 16)) ?? []\n\n  return Uint8Array.from(intArr)\n}\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array\n\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'))\n\nexport function toHEX(input: Bytes): string {\n  if (!u8a(input)) throw new Error('Uint8Array expected')\n  // pre-caching improves the speed 6x\n  let hex = ''\n  for (let i = 0; i < input.length; i++) {\n    hex += hexes[input[i]]\n  }\n  return hex\n}\n"],
  "mappings": "AAKO,SAAS,MAAM,OAAgC;AACpD,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,yBAAyB,KAAK,KAAK,KAAK,MAAM,SAAS,MAAM;AAAA,EACtE,OAAO;AACL,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,OAAO,MAAM,CAAC;AAEpB,UACE,EAAG,QAAQ,MAAM,QAAQ,MAAQ,QAAQ,MAAM,QAAQ,MAAQ,QAAQ,MAAM,QAAQ,MACrF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AAEO,SAAS,iBAAiB,OAAuB;AACtD,SAAO,WAAW,KAAK,KAAK,KAAK,MAAM,SAAS,KAAK,IAAI,MAAM,SAAS;AAC1E;AAEO,SAAS,aAAa,OAAuB;AAClD,SAAO,MAAM,WAAW,IAAI,IAAI,MAAM,MAAM,CAAC,IAAI;AACnD;AAEO,SAAS,QAAQ,OAAsB;AAC5C,QAAM,aAAa,aAAa,KAAK;AACrC,QAAM,SAAS,WAAW,SAAS,MAAM,IAAI,aAAa,IAAI;AAC9D,QAAM,SAAS,OAAO,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,SAAS,MAAM,EAAE,CAAC,KAAK,CAAC;AAE5E,SAAO,WAAW,KAAK,MAAM;AAC/B;AAEA,MAAM,MAAM,CAAC,MAA4B,aAAa;AAEtD,MAAM,QAAQ,MAAM,KAAK,EAAE,QAAQ,IAAI,GAAG,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AAE5E,SAAS,MAAM,OAAsB;AAC1C,MAAI,CAAC,IAAI,KAAK;AAAG,UAAM,IAAI,MAAM,qBAAqB;AAEtD,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,WAAO,MAAM,MAAM,CAAC,CAAC;AAAA,EACvB;AACA,SAAO;AACT;",
  "names": []
}
