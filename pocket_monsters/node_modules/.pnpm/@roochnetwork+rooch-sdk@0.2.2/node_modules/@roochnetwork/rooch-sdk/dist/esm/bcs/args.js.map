{
  "version": 3,
  "sources": ["../../../src/bcs/args.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs, SerializedBcs } from '@mysten/bcs'\n\nimport { Bytes } from '../types/bytes.js'\nimport { isBytes, toHEX } from '../utils/index.js'\nimport { u16, u32, u8, u64, u128, u256, bool, address, objectId } from '../types/index.js'\n\nimport { Address, ObjectId } from './bcs.js'\nimport { Serializer } from './serializer.js'\nimport { StructTag } from './types.js'\n\nexport type ArgType =\n  | 'u8'\n  | 'u16'\n  | 'u32'\n  | 'u64'\n  | 'u128'\n  | 'u256'\n  | 'bool'\n  | 'string'\n  | 'object'\n  | 'objectId'\n  | 'address'\n\nexport class Args {\n  readonly value: Bytes\n\n  constructor(input: Bytes) {\n    this.value = input\n  }\n\n  encodeWithHex(): string {\n    return toHEX(this.value)\n  }\n\n  encode(): Bytes {\n    return this.value\n  }\n\n  static u8(input: u8) {\n    return new Args(bcs.u8().serialize(input).toBytes())\n  }\n\n  static u16(input: u16) {\n    return new Args(bcs.u16().serialize(input).toBytes())\n  }\n\n  static u32(input: u32) {\n    return new Args(bcs.u32().serialize(input).toBytes())\n  }\n\n  static u64(input: u64) {\n    return new Args(bcs.u64().serialize(input).toBytes())\n  }\n\n  static u128(input: u128) {\n    return new Args(bcs.u128().serialize(input).toBytes())\n  }\n\n  static u256(input: u256) {\n    return new Args(bcs.u256().serialize(input).toBytes())\n  }\n\n  static bool(input: bool) {\n    return new Args(bcs.bool().serialize(input).toBytes())\n  }\n\n  static string(input: string) {\n    return new Args(bcs.string().serialize(input).toBytes())\n  }\n\n  static address(input: address) {\n    return new Args(Address.serialize(input).toBytes())\n  }\n\n  static object(input: StructTag) {\n    return this.objectId(Serializer.structTagToObjectID(input))\n  }\n\n  static objectId(input: objectId) {\n    return new Args(ObjectId.serialize(input).toBytes())\n  }\n\n  static struct(input: SerializedBcs<any> | Bytes): Args {\n    return new Args(isBytes(input) ? input : input.toBytes())\n  }\n\n  static vec(type: ArgType, input: number[] | bigint[] | boolean[] | string[] | StructTag[]) {\n    let _value: Bytes\n    switch (type) {\n      case 'u8':\n        _value = bcs\n          .vector(bcs.u8())\n          .serialize(input as number[])\n          .toBytes()\n        break\n      case 'u16':\n        _value = bcs\n          .vector(bcs.u16())\n          .serialize(input as number[])\n          .toBytes()\n        break\n      case 'u32':\n        _value = bcs\n          .vector(bcs.u32())\n          .serialize(input as number[])\n          .toBytes()\n        break\n      case 'u64':\n        _value = bcs\n          .vector(bcs.u64())\n          .serialize(input as bigint[])\n          .toBytes()\n        break\n      case 'u128':\n        _value = bcs\n          .vector(bcs.u128())\n          .serialize(input as bigint[])\n          .toBytes()\n        break\n      case 'u256':\n        _value = bcs\n          .vector(bcs.u256())\n          .serialize(input as number[])\n          .toBytes()\n        break\n      case 'bool':\n        _value = bcs\n          .vector(bcs.bool())\n          .serialize(input as boolean[])\n          .toBytes()\n        break\n      case 'string':\n        _value = bcs\n          .vector(bcs.string())\n          .serialize(input as string[])\n          .toBytes()\n        break\n      case 'object':\n        const tmp = (input as StructTag[]).map(Serializer.structTagToObjectID)\n        _value = bcs.vector(ObjectId).serialize(tmp).toBytes()\n        break\n      case 'objectId':\n        _value = bcs\n          .vector(ObjectId)\n          .serialize(input as string[])\n          .toBytes()\n        break\n      case 'address':\n        _value = bcs\n          .vector(Address)\n          .serialize(input as string[])\n          .toBytes()\n        break\n    }\n\n    return new Args(_value)\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
