{
  "version": 3,
  "sources": ["../../../src/utils/error.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nexport enum ErrorCategory {\n  INVALID_ARGUMENT = 0x1, // Caller specified an invalid argument (http: 400)\n  OUT_OF_RANGE = 0x2, // An input or result of a computation is out of range (http: 400)\n  INVALID_STATE = 0x3, // The system is not in a state where the operation can be performed (http: 400)\n  UNAUTHENTICATED = 0x4, // Request not authenticated due to missing, invalid, or expired auth token (http: 401)\n  PERMISSION_DENIED = 0x5, // client does not have sufficient permission (http: 403)\n  NOT_FOUND = 0x6, // A specified resource is not found (http: 404)\n  ABORTED = 0x7, // Concurrency conflict, such as read-modify-write conflict (http: 409)\n  ALREADY_EXISTS = 0x8, // The resource that a client tried to create already exists (http: 409)\n  RESOURCE_EXHAUSTED = 0x9, // Out of gas or other forms of quota (http: 429)\n  CANCELLED = 0xa, // Request cancelled by the client (http: 499)\n  INTERNAL = 0xb, // Internal error (http: 500)\n  NOT_IMPLEMENTED = 0xc, // Feature not implemented (http: 501)\n  UNAVAILABLE = 0xd, // The service is currently unavailable. Indicates that a retry could solve the issue (http: 503)\n}\n\nexport interface SubStatus {\n  category: ErrorCategory\n  reason: number\n}\n\n// Parse rooch RPC error sub status from `status ABORTED of type Execution with sub status 66537`\nexport function parseRoochErrorCode(errorMessage: string | null) {\n  if (!errorMessage) {\n    return null\n  }\n\n  const regex = /sub status (\\d+)/\n  const match = errorMessage.match(regex)\n  return match ? parseInt(match[1]) : null\n}\n\n// Parse rooch RPC error sub status from `status ABORTED of type Execution with sub status 66537`\nexport function parseRoochErrorSubStatus(errorMessage: string | null): SubStatus | null {\n  const errorCode = parseRoochErrorCode(errorMessage)\n  if (!errorCode) {\n    return null\n  }\n\n  return {\n    category: errorCode >> 16,\n    reason: errorCode & 0xffff,\n  }\n}\n\n// Get the string representation of an enumeration\nexport function getErrorCategoryName(code: ErrorCategory): string {\n  return ErrorCategory[code]\n}\n"],
  "mappings": "AAGO,IAAK,gBAAL,kBAAKA,mBAAL;AACL,EAAAA,8BAAA,sBAAmB,KAAnB;AACA,EAAAA,8BAAA,kBAAe,KAAf;AACA,EAAAA,8BAAA,mBAAgB,KAAhB;AACA,EAAAA,8BAAA,qBAAkB,KAAlB;AACA,EAAAA,8BAAA,uBAAoB,KAApB;AACA,EAAAA,8BAAA,eAAY,KAAZ;AACA,EAAAA,8BAAA,aAAU,KAAV;AACA,EAAAA,8BAAA,oBAAiB,KAAjB;AACA,EAAAA,8BAAA,wBAAqB,KAArB;AACA,EAAAA,8BAAA,eAAY,MAAZ;AACA,EAAAA,8BAAA,cAAW,MAAX;AACA,EAAAA,8BAAA,qBAAkB,MAAlB;AACA,EAAAA,8BAAA,iBAAc,MAAd;AAbU,SAAAA;AAAA,GAAA;AAsBL,SAAS,oBAAoB,cAA6B;AAC/D,MAAI,CAAC,cAAc;AACjB,WAAO;AAAA,EACT;AAEA,QAAM,QAAQ;AACd,QAAM,QAAQ,aAAa,MAAM,KAAK;AACtC,SAAO,QAAQ,SAAS,MAAM,CAAC,CAAC,IAAI;AACtC;AAGO,SAAS,yBAAyB,cAA+C;AACtF,QAAM,YAAY,oBAAoB,YAAY;AAClD,MAAI,CAAC,WAAW;AACd,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL,UAAU,aAAa;AAAA,IACvB,QAAQ,YAAY;AAAA,EACtB;AACF;AAGO,SAAS,qBAAqB,MAA6B;AAChE,SAAO,cAAc,IAAI;AAC3B;",
  "names": ["ErrorCategory"]
}
