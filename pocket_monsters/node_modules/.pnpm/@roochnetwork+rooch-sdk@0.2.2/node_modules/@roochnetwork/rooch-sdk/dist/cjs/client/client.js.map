{
  "version": 3,
  "sources": ["../../../src/client/client.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Args } from '../bcs/index.js'\nimport { Signer } from '../crypto/index.js'\nimport { CreateSessionArgs, Session } from '../session/index.js'\nimport {isValidRoochAddress, decodeToRoochAddressStr, Address} from '../address/index.js'\nimport { address, Bytes, u64 } from '../types/index.js'\nimport { fromHEX, str } from '../utils/index.js'\nimport { RoochHTTPTransport, RoochTransport } from './httpTransport.js'\nimport {\n  CallFunction,\n  CallFunctionArgs,\n  TypeArgs,\n  Transaction,\n  normalizeTypeArgsToStr,\n} from '../transactions/index.js'\nimport {\n  AnnotatedFunctionResultView,\n  AnnotatedMoveStructView,\n  BalanceInfoView,\n  ExecuteTransactionResponseView,\n  GetBalanceParams,\n  GetStatesParams,\n  ListStatesParams,\n  PaginatedStateKVViews,\n  PaginationArguments,\n  PaginationResult,\n  SessionInfoView,\n  ObjectStateView,\n  QueryUTXOsParams,\n  PaginatedUTXOStateViews,\n  PaginatedInscriptionStateViews,\n  QueryInscriptionsParams,\n  GetBalancesParams,\n  PaginatedBalanceInfoViews,\n  QueryObjectStatesParams,\n  PaginatedIndexerObjectStateViews,\n  QueryTransactionsParams,\n  PaginatedTransactionWithInfoViews,\n  PaginatedEventViews,\n  GetEventsByEventHandleParams,\n  QueryEventsParams,\n  PaginatedIndexerEventViews,\n  ModuleABIView,\n  GetModuleABIParams,\n} from './types/index.js'\n\n/**\n * Configuration options for the RoochClient\n * You must provide either a `url` or a `transport`\n */\nexport type RoochClientOptions = NetworkOrTransport\n\ntype NetworkOrTransport =\n  | {\n      url: string\n      transport?: never\n    }\n  | {\n      transport: RoochTransport\n      url?: never\n    }\n\nconst ROOCH_CLIENT_BRAND = Symbol.for('@roochnetwork/RoochClient')\n\nexport function isRoochClient(client: unknown): client is RoochClient {\n  return (\n    typeof client === 'object' &&\n    client !== null &&\n    (client as { [ROOCH_CLIENT_BRAND]: unknown })[ROOCH_CLIENT_BRAND] === true\n  )\n}\n\nexport class RoochClient {\n  protected chainID: bigint | undefined\n  protected transport: RoochTransport\n\n  get [ROOCH_CLIENT_BRAND]() {\n    return true\n  }\n\n  /**\n   * Establish a connection to a rooch RPC endpoint\n   *\n   * @param options configuration options for the API Client\n   */\n  constructor(options: RoochClientOptions) {\n    this.transport = options.transport ?? new RoochHTTPTransport({ url: options.url })\n  }\n\n  async getRpcApiVersion(): Promise<string | undefined> {\n    const resp = await this.transport.request<{ info: { version: string } }>({\n      method: 'rpc.discover',\n      params: [],\n    })\n\n    return resp.info.version\n  }\n\n  async getChainId(): Promise<u64> {\n    if (this.chainID) {\n      return this.chainID\n    }\n\n    return this.transport.request({\n      method: 'rooch_getChainID',\n      params: [],\n    })\n  }\n\n  async executeViewFunction(input: CallFunctionArgs): Promise<AnnotatedFunctionResultView> {\n    const callFunction = new CallFunction(input)\n\n    return await this.transport.request({\n      method: 'rooch_executeViewFunction',\n      params: [\n        {\n          function_id: callFunction.functionId(),\n          args: callFunction.encodeArgs(),\n          ty_args: callFunction.typeArgs,\n        },\n      ],\n    })\n  }\n\n  async signAndExecuteTransaction({\n    transaction,\n    signer,\n    option = { withOutput: true },\n  }: {\n    transaction: Transaction | Bytes\n    signer: Signer\n    option?: {\n      withOutput: boolean\n    }\n  }): Promise<ExecuteTransactionResponseView> {\n    let transactionHex: string\n\n    if (transaction instanceof Uint8Array) {\n      transactionHex = str('hex', transaction)\n    } else {\n      let sender = signer.getRoochAddress().toHexAddress()\n      transaction.setChainId(await this.getChainId())\n      transaction.setSeqNumber(await this.getSequenceNumber(sender))\n      transaction.setSender(sender)\n\n      const auth = await signer.signTransaction(transaction)\n\n      transaction.setAuth(auth)\n\n      transactionHex = `0x${transaction.encode().toHex()}`\n    }\n\n    return await this.transport.request({\n      method: 'rooch_executeRawTransaction',\n      params: [transactionHex, option],\n    })\n  }\n\n  // Get the states by access_path\n  async getStates(params: GetStatesParams): Promise<ObjectStateView[]> {\n    const result = await this.transport.request({\n      method: 'rooch_getStates',\n      params: [params.accessPath, params.stateOption],\n    })\n\n    const typedResult = result as unknown as ObjectStateView[]\n    return typedResult[0] === null ? [] : typedResult\n  }\n\n  async listStates(params: ListStatesParams): Promise<PaginatedStateKVViews> {\n    return await this.transport.request({\n      method: 'rooch_listStates',\n      params: [params.accessPath, params.cursor, params.limit, params.stateOption],\n    })\n  }\n\n  async getModuleAbi(params: GetModuleABIParams): Promise<ModuleABIView> {\n    return await this.transport.request({\n      method: 'rooch_getModuleABI',\n      params: [params.moduleAddr, params.moduleName],\n    })\n  }\n  async getEvents(input: GetEventsByEventHandleParams): Promise<PaginatedEventViews> {\n    return await this.transport.request({\n      method: 'rooch_getEventsByEventHandle',\n      params: [\n        input.eventHandleType,\n        input.cursor,\n        input.limit,\n        input.descendingOrder,\n        input.eventOptions,\n      ],\n    })\n  }\n\n  async queryEvents(input: QueryEventsParams): Promise<PaginatedIndexerEventViews> {\n    return await this.transport.request({\n      method: 'rooch_queryEvents',\n      params: [input.filter, input.cursor, input.limit, input.queryOption],\n    })\n  }\n\n  // Query the Inscription via global index by Inscription filter\n  async queryInscriptions(input: QueryInscriptionsParams): Promise<PaginatedInscriptionStateViews> {\n    return await this.transport.request({\n      method: 'btc_queryInscriptions',\n      params: [input.filter, input.cursor, input.limit, input.descendingOrder],\n    })\n  }\n\n  async queryUTXO(input: QueryUTXOsParams): Promise<PaginatedUTXOStateViews> {\n    return this.transport.request({\n      method: 'btc_queryUTXOs',\n      params: [input.filter, input.cursor, input.limit, input.descendingOrder],\n    })\n  }\n\n  async queryObjectStates(\n    input: QueryObjectStatesParams,\n  ): Promise<PaginatedIndexerObjectStateViews> {\n    return this.transport.request({\n      method: 'rooch_queryObjectStates',\n      params: [input.filter, input.cursor, input.limit, input.queryOption],\n    })\n  }\n\n  async queryTransactions(\n    input: QueryTransactionsParams,\n  ): Promise<PaginatedTransactionWithInfoViews> {\n    return this.transport.request({\n      method: 'rooch_queryTransactions',\n      params: [input.filter, input.cursor, input.limit, input.queryOption],\n    })\n  }\n\n  // helper fn\n\n  async getSequenceNumber(address: string): Promise<u64> {\n    const resp = await this.executeViewFunction({\n      target: '0x2::account::sequence_number',\n      args: [Args.address(address)],\n    })\n\n    if (resp && resp.return_values) {\n      return BigInt(resp.return_values[0].decoded_value as number)\n    }\n\n    return BigInt(0)\n  }\n\n  /**\n   * Get the total coin balance for one coin type, owned by the address owner.\n   */\n  async getBalance(input: GetBalanceParams): Promise<BalanceInfoView> {\n    if (!input.owner || !isValidRoochAddress(input.owner)) {\n      throw new Error('Invalid rooch address')\n    }\n    return await this.transport.request({\n      method: 'rooch_getBalance',\n      params: [input.owner, input.coinType],\n    })\n  }\n\n  async getBalances(input: GetBalancesParams): Promise<PaginatedBalanceInfoViews> {\n    if (!input.owner || !isValidRoochAddress(input.owner)) {\n      throw new Error('Invalid rooch address')\n    }\n    return await this.transport.request({\n      method: 'rooch_getBalances',\n      params: [input.owner, input.cursor, input.limit],\n    })\n  }\n\n  async transfer(input: {\n    signer: Signer\n    recipient: address\n    amount: number | bigint\n    coinType: TypeArgs\n  }) {\n    const tx = new Transaction()\n    tx.callFunction({\n      target: '0x3::transfer::transfer_coin',\n      args: [Args.address(input.recipient), Args.u256(BigInt(input.amount))],\n      typeArgs: [normalizeTypeArgsToStr(input.coinType)],\n    })\n\n    return await this.signAndExecuteTransaction({\n      transaction: tx,\n      signer: input.signer,\n    })\n  }\n\n  async transferObject(input: {\n    signer: Signer\n    recipient: address\n    objectId: string\n    objectType: TypeArgs\n  }) {\n    const tx = new Transaction()\n    tx.callFunction({\n      target: '0x3::transfer::transfer_object',\n      args: [Args.address(input.recipient), Args.objectId(input.objectId)],\n      typeArgs: [normalizeTypeArgsToStr(input.objectType)],\n    })\n\n    return await this.signAndExecuteTransaction({\n      transaction: tx,\n      signer: input.signer,\n    })\n  }\n\n  async resolveBTCAddress(roochAddress: string | Address) {\n    return await this.executeViewFunction({\n      target: '0x3::address_mapping::resolve_bitcoin',\n      args: [Args.address(roochAddress)],\n    })\n  }\n\n  async createSession({ sessionArgs, signer }: { sessionArgs: CreateSessionArgs; signer: Signer }) {\n    return Session.CREATE({\n      ...sessionArgs,\n      client: this,\n      signer: signer,\n    })\n  }\n\n  async removeSession({ authKey, signer }: { authKey: string; signer: Signer }): Promise<boolean> {\n    const tx = new Transaction()\n    tx.callFunction({\n      target: '0x3::session_key::remove_session_key_entry',\n      args: [Args.vec('u8', Array.from(fromHEX(authKey)))],\n    })\n\n    return (\n      (\n        await this.signAndExecuteTransaction({\n          transaction: tx,\n          signer,\n        })\n      ).execution_info.status.type === 'executed'\n    )\n  }\n\n  async sessionIsExpired({\n    address,\n    authKey,\n  }: {\n    address: address\n    authKey: string\n  }): Promise<boolean> {\n    const result = await this.executeViewFunction({\n      target: '0x3::session_key::is_expired_session_key',\n      args: [Args.address(address), Args.vec('u8', Array.from(fromHEX(authKey)))],\n    })\n\n    if (result.vm_status !== 'Executed') {\n      throw new Error('view 0x3::session_key::is_expired_session_key fail')\n    }\n\n    return result.return_values![0].decoded_value as boolean\n  }\n\n  async getSessionKeys({\n    address,\n    limit,\n    cursor,\n  }: {\n    address: address\n  } & PaginationArguments<string>): Promise<PaginationResult<string, SessionInfoView>> {\n    const accessPath = `/resource/${decodeToRoochAddressStr(address)}/0x3::session_key::SessionKeys`\n    const states = await this.getStates({\n      accessPath,\n      stateOption: {\n        decode: true,\n        showDisplay: true,\n      },\n    })\n\n    if (states.length === 0) {\n      return {\n        data: [],\n        hasNextPage: false,\n      }\n    }\n\n    // Maybe we should define the type?\n    const tableId = (\n      (\n        (\n          (states[0].decoded_value as AnnotatedMoveStructView).value[\n            'value'\n          ] as AnnotatedMoveStructView\n        ).value['keys'] as AnnotatedMoveStructView\n      ).value['handle'] as AnnotatedMoveStructView\n    ).value['id'] as string\n\n    const tablePath = `/table/${tableId}`\n\n    const statePage = await this.listStates({\n      accessPath: tablePath,\n      cursor,\n      limit: limit?.toString(),\n      stateOption: {\n        decode: true,\n        showDisplay: true,\n      },\n    })\n\n    const parseScopes = (data: Array<any>) => {\n      const result = new Array<string>()\n\n      for (const scope of data) {\n        const value = scope.value\n        result.push(`${value.module_address}::${value.module_name}::${value.function_name}`)\n      }\n\n      return result\n    }\n\n    const parseStateToSessionInfo = () => {\n      const result = new Array<SessionInfoView>()\n\n      for (const state of statePage.data as any) {\n        const moveValue = state?.state.decoded_value as any\n\n        if (moveValue) {\n          const val = moveValue.value.value.value\n\n          result.push({\n            appName: val.app_name,\n            appUrl: val.app_url,\n            authenticationKey: val.authentication_key,\n            scopes: parseScopes(val.scopes),\n            createTime: parseInt(val.create_time),\n            lastActiveTime: parseInt(val.last_active_time),\n            maxInactiveInterval: parseInt(val.max_inactive_interval),\n          } as SessionInfoView)\n        }\n      }\n      return result.sort((a, b) => b.createTime - a.createTime)\n    }\n\n    return {\n      data: parseStateToSessionInfo(),\n      cursor: statePage.next_cursor,\n      hasNextPage: statePage.has_next_page,\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["address"]
}
