"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var args_exports = {};
__export(args_exports, {
  Args: () => Args
});
module.exports = __toCommonJS(args_exports);
var import_bcs = require("@mysten/bcs");
var import_utils = require("../utils/index.js");
var import_bcs2 = require("./bcs.js");
var import_serializer = require("./serializer.js");
class Args {
  constructor(input) {
    this.value = input;
  }
  encodeWithHex() {
    return (0, import_utils.toHEX)(this.value);
  }
  encode() {
    return this.value;
  }
  static u8(input) {
    return new Args(import_bcs.bcs.u8().serialize(input).toBytes());
  }
  static u16(input) {
    return new Args(import_bcs.bcs.u16().serialize(input).toBytes());
  }
  static u32(input) {
    return new Args(import_bcs.bcs.u32().serialize(input).toBytes());
  }
  static u64(input) {
    return new Args(import_bcs.bcs.u64().serialize(input).toBytes());
  }
  static u128(input) {
    return new Args(import_bcs.bcs.u128().serialize(input).toBytes());
  }
  static u256(input) {
    return new Args(import_bcs.bcs.u256().serialize(input).toBytes());
  }
  static bool(input) {
    return new Args(import_bcs.bcs.bool().serialize(input).toBytes());
  }
  static string(input) {
    return new Args(import_bcs.bcs.string().serialize(input).toBytes());
  }
  static address(input) {
    return new Args(import_bcs2.Address.serialize(input).toBytes());
  }
  static object(input) {
    return this.objectId(import_serializer.Serializer.structTagToObjectID(input));
  }
  static objectId(input) {
    return new Args(import_bcs2.ObjectId.serialize(input).toBytes());
  }
  static struct(input) {
    return new Args((0, import_utils.isBytes)(input) ? input : input.toBytes());
  }
  static vec(type, input) {
    let _value;
    switch (type) {
      case "u8":
        _value = import_bcs.bcs.vector(import_bcs.bcs.u8()).serialize(input).toBytes();
        break;
      case "u16":
        _value = import_bcs.bcs.vector(import_bcs.bcs.u16()).serialize(input).toBytes();
        break;
      case "u32":
        _value = import_bcs.bcs.vector(import_bcs.bcs.u32()).serialize(input).toBytes();
        break;
      case "u64":
        _value = import_bcs.bcs.vector(import_bcs.bcs.u64()).serialize(input).toBytes();
        break;
      case "u128":
        _value = import_bcs.bcs.vector(import_bcs.bcs.u128()).serialize(input).toBytes();
        break;
      case "u256":
        _value = import_bcs.bcs.vector(import_bcs.bcs.u256()).serialize(input).toBytes();
        break;
      case "bool":
        _value = import_bcs.bcs.vector(import_bcs.bcs.bool()).serialize(input).toBytes();
        break;
      case "string":
        _value = import_bcs.bcs.vector(import_bcs.bcs.string()).serialize(input).toBytes();
        break;
      case "object":
        const tmp = input.map(import_serializer.Serializer.structTagToObjectID);
        _value = import_bcs.bcs.vector(import_bcs2.ObjectId).serialize(tmp).toBytes();
        break;
      case "objectId":
        _value = import_bcs.bcs.vector(import_bcs2.ObjectId).serialize(input).toBytes();
        break;
      case "address":
        _value = import_bcs.bcs.vector(import_bcs2.Address).serialize(input).toBytes();
        break;
    }
    return new Args(_value);
  }
}
//# sourceMappingURL=args.js.map
