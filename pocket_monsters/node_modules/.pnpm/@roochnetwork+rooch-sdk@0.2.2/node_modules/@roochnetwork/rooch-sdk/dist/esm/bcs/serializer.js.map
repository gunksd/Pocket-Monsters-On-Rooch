{
  "version": 3,
  "sources": ["../../../src/bcs/serializer.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { splitGenericParameters } from '@mysten/bcs'\n\nimport { sha3_256, toHEX } from '../utils/index.js'\nimport { canonicalRoochAddress, normalizeRoochAddress } from '../address/index.js'\n\nimport { StructTag, TypeTag, BcsTypeTag } from './types.js'\n\nconst VECTOR_REGEX = /^vector<(.+)>$/\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/\n\nexport class Serializer {\n  static structTagToObjectID(input: StructTag): string {\n    return `0x${toHEX(sha3_256(Serializer.structTagToCanonicalString(input)))}`\n  }\n\n  static structTagToCanonicalString(input: StructTag): string {\n    let result = `${canonicalRoochAddress(input.address)}::${input.module}::${input.name}`\n\n    if (input.typeParams && input.typeParams.length > 0) {\n      const typeParams = input.typeParams.map(Serializer.typeTagToString).join(',')\n      result += `<${typeParams}>`\n    }\n\n    return result\n  }\n\n  static typeTagToString(input: TypeTag): string {\n    if (typeof input === 'string') {\n      return input\n    }\n\n    if ('Vector' in input) {\n      return `vector<${Serializer.typeTagToString(input.Vector)}>`\n    }\n\n    if ('Struct' in input) {\n      return Serializer.structTagToCanonicalString(input.Struct)\n    }\n\n    throw new Error('Invalid TypeTag')\n  }\n\n  static typeTagParseFromStr(str: string, normalizeAddress = false): BcsTypeTag {\n    if (str === 'address') {\n      return { address: null }\n    } else if (str === 'bool') {\n      return { bool: null }\n    } else if (str === 'u8') {\n      return { u8: null }\n    } else if (str === 'u16') {\n      return { u16: null }\n    } else if (str === 'u32') {\n      return { u32: null }\n    } else if (str === 'u64') {\n      return { u64: null }\n    } else if (str === 'u128') {\n      return { u128: null }\n    } else if (str === 'u256') {\n      return { u256: null }\n    } else if (str === 'signer') {\n      return { signer: null }\n    }\n\n    const vectorMatch = str.match(VECTOR_REGEX)\n    if (vectorMatch) {\n      return {\n        vector: Serializer.typeTagParseFromStr(vectorMatch[1], normalizeAddress),\n      }\n    }\n\n    const structMatch = str.match(STRUCT_REGEX)\n    if (structMatch) {\n      const address = normalizeAddress ? normalizeRoochAddress(structMatch[1]) : structMatch[1]\n      return {\n        struct: {\n          address,\n          module: structMatch[2],\n          name: structMatch[3],\n          typeParams:\n            structMatch[5] === undefined\n              ? []\n              : Serializer.parseStructTypeArgs(structMatch[5], normalizeAddress),\n        },\n      }\n    }\n\n    throw new Error(`Encountered unexpected token when parsing type args for ${str}`)\n  }\n\n  static parseStructTypeArgs(str: string, normalizeAddress = false): BcsTypeTag[] {\n    return splitGenericParameters(str).map((tok) =>\n      Serializer.typeTagParseFromStr(tok, normalizeAddress),\n    )\n  }\n\n  static tagToString(tag: BcsTypeTag): string {\n    if ('bool' in tag) {\n      return 'bool'\n    }\n    if ('u8' in tag) {\n      return 'u8'\n    }\n    if ('u16' in tag) {\n      return 'u16'\n    }\n    if ('u32' in tag) {\n      return 'u32'\n    }\n    if ('u64' in tag) {\n      return 'u64'\n    }\n    if ('u128' in tag) {\n      return 'u128'\n    }\n    if ('u256' in tag) {\n      return 'u256'\n    }\n    if ('address' in tag) {\n      return 'address'\n    }\n    if ('signer' in tag) {\n      return 'signer'\n    }\n    if ('vector' in tag) {\n      return `vector<${Serializer.tagToString(tag.vector)}>`\n    }\n    if ('struct' in tag) {\n      const struct = tag.struct\n      const typeParams = struct.typeParams.map(Serializer.tagToString).join(', ')\n      return `${struct.address}::${struct.module}::${struct.name}${\n        typeParams ? `<${typeParams}>` : ''\n      }`\n    }\n    throw new Error('Invalid TypeTag')\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
