{
  "version": 3,
  "sources": ["../../../src/address/rooch.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bech32m } from '@scure/base'\n\nimport { Bytes } from '../types/index.js'\nimport { fromHEX, isHex, toHEX } from '../utils/index.js'\n\nimport { normalizeRoochAddress } from './util.js'\nimport { Address, ROOCH_BECH32_PREFIX } from './address.js'\n\nexport class RoochAddress implements Address {\n  private readonly address: Bytes\n\n  constructor(address: Bytes | string) {\n    if (typeof address === 'string') {\n      if (isHex(address)) {\n        this.address = fromHEX(address)\n      } else {\n        this.address = bech32m.fromWords(bech32m.decode(address).words)\n      }\n    } else {\n      this.address = address\n    }\n  }\n\n  toStr(): string {\n    return this.toBech32Address()\n  }\n\n  toBytes(): Bytes {\n    return this.address\n  }\n\n  toHexAddress(): string {\n    return normalizeRoochAddress(toHEX(this.address))\n  }\n\n  toBech32Address(): string {\n    return bech32m.encode(ROOCH_BECH32_PREFIX, bech32m.toWords(this.address))\n  }\n}\n"],
  "mappings": "AAGA,SAAS,eAAe;AAGxB,SAAS,SAAS,OAAO,aAAa;AAEtC,SAAS,6BAA6B;AACtC,SAAkB,2BAA2B;AAEtC,MAAM,aAAgC;AAAA,EAG3C,YAAY,SAAyB;AACnC,QAAI,OAAO,YAAY,UAAU;AAC/B,UAAI,MAAM,OAAO,GAAG;AAClB,aAAK,UAAU,QAAQ,OAAO;AAAA,MAChC,OAAO;AACL,aAAK,UAAU,QAAQ,UAAU,QAAQ,OAAO,OAAO,EAAE,KAAK;AAAA,MAChE;AAAA,IACF,OAAO;AACL,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA,EAEA,QAAgB;AACd,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA,EAEA,UAAiB;AACf,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,eAAuB;AACrB,WAAO,sBAAsB,MAAM,KAAK,OAAO,CAAC;AAAA,EAClD;AAAA,EAEA,kBAA0B;AACxB,WAAO,QAAQ,OAAO,qBAAqB,QAAQ,QAAQ,KAAK,OAAO,CAAC;AAAA,EAC1E;AACF;",
  "names": []
}
