import { Args } from '../bcs/index.js';
import { address, Bytes, identifier, u8, u64 } from '../types/index.js';
import { CallFunctionArgs, CallScript } from './types.js';
export declare class CallFunction {
    address: string;
    module: identifier;
    function: identifier;
    args: Args[];
    typeArgs: string[];
    constructor(input: CallFunctionArgs);
    functionId(): string;
    encodeArgs(): string[];
    encodeArgsWithUtf8(): string;
    encodeArgsToByteArrays(): u8[][];
}
type MoveActionType = CallFunction | CallScript;
export declare class MoveAction {
    scheme: number;
    val: MoveActionType;
    private constructor();
    static newCallFunction(input: CallFunctionArgs): MoveAction;
    static newCallScript(input: CallScript): MoveAction;
}
export declare class TransactionData {
    sender?: address;
    sequenceNumber?: u64;
    chainId?: u64;
    maxGas: u64;
    action: MoveAction;
    constructor(action: MoveAction, sender?: string, sequenceNumber?: bigint, chainId?: bigint, maxGas?: bigint);
    encode(): Bytes;
    hash(): Bytes;
}
export {};
