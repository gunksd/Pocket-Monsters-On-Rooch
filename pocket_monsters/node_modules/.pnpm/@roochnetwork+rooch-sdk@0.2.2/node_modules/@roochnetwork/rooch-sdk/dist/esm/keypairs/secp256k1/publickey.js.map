{
  "version": 3,
  "sources": ["../../../../src/keypairs/secp256k1/publickey.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bech32m } from '@scure/base'\nimport { schnorr, secp256k1 } from '@noble/curves/secp256k1'\n\nimport { BitcoinAddress } from '../../address/index.js'\nimport { PublicKey, PublicKeyInitData, SIGNATURE_SCHEME_TO_FLAG } from '../../crypto/index.js'\nimport { Bytes, EmptyBytes } from '../../types/index.js'\nimport { fromB64, sha256, toHEX } from '../../utils/index.js'\n\nconst SCHNORR_PUBLIC_KEY_SIZE = 32\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey extends PublicKey<BitcoinAddress> {\n  static SIZE = SCHNORR_PUBLIC_KEY_SIZE\n\n  private readonly data: Uint8Array\n\n  /**\n   * Create a new Secp256k1PublicKey object\n   * @param value secp256k1 public key as buffer or base-64 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super()\n\n    if (typeof value === 'string') {\n      this.data = fromB64(value)\n    } else if (value instanceof Uint8Array) {\n      this.data = value\n    } else {\n      this.data = Uint8Array.from(value)\n    }\n\n    if (this.data.length !== SCHNORR_PUBLIC_KEY_SIZE && this.data.length !== 33) {\n      throw new Error(\n        `Invalid public key input. Expected ${SCHNORR_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n      )\n    }\n  }\n\n  /**\n   * Checks if two Secp256k1 public keys are equal\n   */\n  override equals(publicKey: Secp256k1PublicKey): boolean {\n    return super.equals(publicKey)\n  }\n\n  /**\n   * Return the byte array representation of the Secp256k1 public key\n   */\n  toBytes(): Uint8Array {\n    return this.data\n  }\n\n  toString(): string {\n    return toHEX(this.data)\n  }\n\n  /**\n   * Return the Bitcoin address associated with this Secp256k1 public key\n   */\n  toAddress(): BitcoinAddress {\n    const tapTweak = (a: Bytes, b: Bytes) => {\n      const u = schnorr.utils\n      const t = u.taggedHash('TapTweak', a, b)\n      const tn = u.bytesToNumberBE(t)\n      if (tn >= secp256k1.CURVE.n) throw new Error('tweak higher than curve order')\n      return tn\n    }\n\n    // Each hex char represents half a byte, hence hex address doubles the length\n    const u = schnorr.utils\n    const t = tapTweak(this.data, EmptyBytes) // t = int_from_bytes(tagged_hash(\"TapTweak\", pubkey + h))\n    const P = u.lift_x(u.bytesToNumberBE(this.data)) // P = lift_x(int_from_bytes(pubkey))\n    const Q = P.add(secp256k1.ProjectivePoint.fromPrivateKey(t)) // Q = point_add(P, point_mul(G, t))\n    const tweakedPubkey = u.pointToBytes(Q)\n\n    /// tr version 1\n    return new BitcoinAddress(bech32m.encode('tb', [1].concat(bech32m.toWords(tweakedPubkey))))\n  }\n\n  /**\n   * Return the Rooch address associated with this Secp256k1 public key\n   */\n  flag(): number {\n    return SIGNATURE_SCHEME_TO_FLAG['Secp256k1']\n  }\n\n  /**\n   * Verifies that the signature is valid for the provided message\n   */\n  async verify(message: Uint8Array, signature: Uint8Array): Promise<boolean> {\n    return secp256k1.verify(\n      secp256k1.Signature.fromCompact(signature),\n      sha256(message),\n      this.toBytes(),\n    )\n  }\n}\n"],
  "mappings": "AAGA,SAAS,eAAe;AACxB,SAAS,SAAS,iBAAiB;AAEnC,SAAS,sBAAsB;AAC/B,SAAS,WAA8B,gCAAgC;AACvE,SAAgB,kBAAkB;AAClC,SAAS,SAAS,QAAQ,aAAa;AAEvC,MAAM,0BAA0B;AAKzB,MAAM,2BAA2B,UAA0B;AAAA;AAAA;AAAA;AAAA;AAAA,EAShE,YAAY,OAA0B;AACpC,UAAM;AAEN,QAAI,OAAO,UAAU,UAAU;AAC7B,WAAK,OAAO,QAAQ,KAAK;AAAA,IAC3B,WAAW,iBAAiB,YAAY;AACtC,WAAK,OAAO;AAAA,IACd,OAAO;AACL,WAAK,OAAO,WAAW,KAAK,KAAK;AAAA,IACnC;AAEA,QAAI,KAAK,KAAK,WAAW,2BAA2B,KAAK,KAAK,WAAW,IAAI;AAC3E,YAAM,IAAI;AAAA,QACR,sCAAsC,sCAAsC,KAAK,KAAK;AAAA,MACxF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKS,OAAO,WAAwC;AACtD,WAAO,MAAM,OAAO,SAAS;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,UAAsB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,WAAmB;AACjB,WAAO,MAAM,KAAK,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,YAA4B;AAC1B,UAAM,WAAW,CAAC,GAAU,MAAa;AACvC,YAAMA,KAAI,QAAQ;AAClB,YAAMC,KAAID,GAAE,WAAW,YAAY,GAAG,CAAC;AACvC,YAAM,KAAKA,GAAE,gBAAgBC,EAAC;AAC9B,UAAI,MAAM,UAAU,MAAM;AAAG,cAAM,IAAI,MAAM,+BAA+B;AAC5E,aAAO;AAAA,IACT;AAGA,UAAM,IAAI,QAAQ;AAClB,UAAM,IAAI,SAAS,KAAK,MAAM,UAAU;AACxC,UAAM,IAAI,EAAE,OAAO,EAAE,gBAAgB,KAAK,IAAI,CAAC;AAC/C,UAAM,IAAI,EAAE,IAAI,UAAU,gBAAgB,eAAe,CAAC,CAAC;AAC3D,UAAM,gBAAgB,EAAE,aAAa,CAAC;AAGtC,WAAO,IAAI,eAAe,QAAQ,OAAO,MAAM,CAAC,CAAC,EAAE,OAAO,QAAQ,QAAQ,aAAa,CAAC,CAAC,CAAC;AAAA,EAC5F;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe;AACb,WAAO,yBAAyB,WAAW;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,SAAqB,WAAyC;AACzE,WAAO,UAAU;AAAA,MACf,UAAU,UAAU,YAAY,SAAS;AAAA,MACzC,OAAO,OAAO;AAAA,MACd,KAAK,QAAQ;AAAA,IACf;AAAA,EACF;AACF;AArFa,mBACJ,OAAO;",
  "names": ["u", "t"]
}
