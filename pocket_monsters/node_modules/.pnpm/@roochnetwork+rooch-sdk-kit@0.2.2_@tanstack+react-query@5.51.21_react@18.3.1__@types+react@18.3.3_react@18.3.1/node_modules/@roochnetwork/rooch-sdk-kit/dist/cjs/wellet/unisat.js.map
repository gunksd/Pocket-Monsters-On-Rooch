{
  "version": 3,
  "sources": ["../../../src/wellet/unisat.ts", "../../../src/wellet/wallet.ts", "../../../src/wellet/bitcoin.ts", "../../../src/wellet/okx.ts", "../../../src/wellet/onekey.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BitcoinAddress, Bytes, ThirdPartyAddress, str, bytes } from '@roochnetwork/rooch-sdk'\n\nimport { BitcoinWallet } from '../wellet/index.js'\n\nconst UNISAT_SUPPORT_NETWORKS = ['livenet', 'testnet']\n\nexport class UniSatWallet extends BitcoinWallet {\n  getName(): string {\n    return 'unisat'\n  }\n\n  getTarget(): any {\n    return (window as any).unisat\n  }\n\n  async connect(): Promise<ThirdPartyAddress[]> {\n    let addresses: string[] = await this.getTarget().getAccounts()\n\n    if (!addresses || addresses.length === 0) {\n      await this.getTarget().requestAccounts()\n      return this.connect()\n    }\n\n    let publicKey = await this.getTarget().getPublicKey()\n\n    this.address = addresses.map((item) => new BitcoinAddress(item))\n    this.currentAddress = this.address[0]\n    this.publicKey = publicKey\n\n    return this.address\n  }\n\n  switchNetwork(network: string): void {\n    this.getTarget().switchNetwork(network)\n  }\n  getNetwork(): string {\n    return this.getTarget().getNetwork()\n  }\n\n  getSupportNetworks(): string[] {\n    return UNISAT_SUPPORT_NETWORKS\n  }\n\n  onAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().on('accountsChanged', callback)\n  }\n\n  removeAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().removeListener('accountsChanged', callback)\n  }\n\n  onNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().on('networkChanged', callback)\n  }\n\n  removeNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().removeListener('networkChanged', callback)\n  }\n\n  async sign(msg: Bytes): Promise<Bytes> {\n    const msgStr = str('utf8', msg)\n    const sign = await this.getTarget().signMessage(msgStr)\n    return bytes('base64', sign).subarray(1) // remove recover id\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ThirdPartyAddress, Bytes, Signer } from '@roochnetwork/rooch-sdk'\n\nimport { SupportChain } from '../feature/index.js'\n\nexport abstract class Wallet extends Signer {\n  protected address: ThirdPartyAddress[] | undefined\n  protected publicKey: string | undefined\n  protected currentAddress: ThirdPartyAddress | undefined\n\n  /**\n   * Connects the wallet.\n   * @returns A promise that resolves to an array of wallet accounts.\n   */\n  abstract connect(): Promise<ThirdPartyAddress[]>\n\n  abstract getName(): string\n  /**\n   * Signs a message.\n   * @param msg - The message to sign.\n   * @returns A promise that resolves to the signature string.\n   */\n  abstract sign(msg: Bytes): Promise<Bytes>\n\n  /**\n   * Switches the network.\n   */\n  abstract switchNetwork(network: string): void\n\n  /**\n   * Switches the account.\n   * Note: Wallets with Bitcoin chain are not currently supported.\n   */\n  abstract switchAccount(address: string): void\n\n  /**\n   * Retrieves the current network of the wallet.\n   * @returns The current network as a string.\n   */\n  abstract getNetwork(): string\n\n  /**\n   * Retrieves the supported networks of the wallet.\n   * @returns An array of supported network strings.\n   */\n  abstract getSupportNetworks(): string[]\n\n  /**\n   * Registers a callback function to be invoked when accounts are changed.\n   * @param callback - A function to be called when accounts are changed. It receives an array of account strings as its argument.\n   */\n  abstract onAccountsChanged(callback: (accounts: Array<string>) => void): void\n\n  /**\n   * Removes a previously registered callback function for account changes.\n   * @param callback - The callback function to be removed.\n   */\n  abstract removeAccountsChanged(callback: (accounts: Array<string>) => void): void\n\n  /**\n   * Registers a callback function to be invoked when the network is changed.\n   * @param callback - A function to be called when the network is changed. It receives the new network as its argument.\n   */\n  abstract onNetworkChanged(callback: (network: string) => void): void\n\n  /**\n   * Removes a previously registered callback function for network changes.\n   * @param callback - The callback function to be removed.\n   */\n  abstract removeNetworkChanged(callback: (network: string) => void): void\n\n  /**\n   * Retrieves the target of the wallet.\n   * @returns The target of the wallet.\n   */\n  abstract getTarget(): any\n\n  abstract getChain(): SupportChain\n\n  /**\n   * Normalizes the recovery ID.\n   * @param recoveryID - The recovery ID to be normalized.\n   * @returns The normalized recovery ID as a number.\n   */\n  protected abstract normalize_recovery_id(recoveryID: number): number\n\n  /**\n   * Checks if the wallet is installed.\n   * @returns A promise that resolves to true if the wallet is installed, otherwise false.\n   */\n  async checkInstalled(): Promise<boolean> {\n    for (let i = 1; i < 10 && !this.getTarget(); i += 1) {\n      await new Promise((resolve) => setTimeout(resolve, 100 * i))\n    }\n    return Promise.resolve(this.getTarget() !== undefined)\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  Address,\n  Authenticator,\n  BitcoinAddress,\n  BitcoinSignMessage,\n  PublicKey,\n  RoochAddress,\n  Secp256k1PublicKey,\n  SignatureScheme,\n  fromHEX,\n  Transaction,\n} from '@roochnetwork/rooch-sdk'\n\nimport { SupportChain } from '../feature/index.js'\nimport { Wallet } from '../wellet/index.js'\n\nexport abstract class BitcoinWallet extends Wallet {\n  async signTransaction(input: Transaction): Promise<Authenticator> {\n    const message = new BitcoinSignMessage(input.hashData(), input.getInfo() || '')\n    return Authenticator.bitcoin(message, this, 'raw')\n  }\n\n  getPublicKey(): PublicKey<Address> {\n    if (!this.publicKey) {\n      throw Error('Please connect your wallet first')\n    }\n\n    return new Secp256k1PublicKey(fromHEX(this.publicKey))\n  }\n\n  getRoochAddress(): RoochAddress {\n    if (!this.currentAddress) {\n      throw Error('Please connect your wallet first')\n    }\n    return (this.currentAddress as BitcoinAddress).genRoochAddress()\n  }\n\n  getBitcoinAddress(): BitcoinAddress {\n    if (!this.currentAddress) {\n      throw Error('Please connect your wallet first')\n    }\n    return this.currentAddress as BitcoinAddress\n  }\n\n  getKeyScheme(): SignatureScheme {\n    return 'Secp256k1'\n  }\n\n  normalize_recovery_id(v: number) {\n    let normalizeV = v - 27 - 4\n\n    if (normalizeV < 0) {\n      normalizeV = normalizeV + 4\n    }\n\n    return normalizeV\n  }\n\n  switchAccount(): void {\n    throw new Error('Method not implemented.')\n  }\n\n  getChain(): SupportChain {\n    return 'bitcoin'\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BitcoinAddress, Bytes, ThirdPartyAddress, str, bytes } from '@roochnetwork/rooch-sdk'\nimport { BitcoinWallet } from '../wellet/index.js'\n\nexport class OkxWallet extends BitcoinWallet {\n  getName(): string {\n    return 'okx'\n  }\n\n  async sign(msg: Bytes): Promise<Bytes> {\n    const msgStr = str('utf8', msg)\n    const sign = await this.getTarget().signMessage(msgStr, {\n      from: this.currentAddress?.toStr(),\n    })\n    return bytes('base64', sign).subarray(1)\n  }\n\n  getTarget(): any {\n    return (window as any).okxwallet?.bitcoin\n  }\n\n  async connect(): Promise<ThirdPartyAddress[]> {\n    const obj = await this.getTarget().connect()\n    this.currentAddress = new BitcoinAddress(obj.address)\n    this.publicKey = obj.compressedPublicKey !== '' ? obj.compressedPublicKey : obj.publicKey\n    this.address = [this.currentAddress]\n\n    return this.address\n  }\n\n  switchNetwork(): void {\n    this.getTarget().switchNetwork()\n  }\n\n  getNetwork(): string {\n    return this.getTarget().getNetwork()\n  }\n\n  getSupportNetworks(): string[] {\n    return ['livenet']\n  }\n\n  onAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().on('accountsChanged', callback)\n  }\n\n  removeAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().removeListener('accountsChanged', callback)\n  }\n\n  onNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().on('networkChanged', callback)\n  }\n\n  removeNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().removeListener('networkChanged', callback)\n  }\n}\n", "// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BitcoinAddress, Bytes, ThirdPartyAddress, str, bytes } from '@roochnetwork/rooch-sdk'\nimport { BitcoinWallet } from '../wellet/index.js'\n\nexport class OnekeyWallet extends BitcoinWallet {\n  getName(): string {\n    return 'onekey'\n  }\n\n  async sign(msg: Bytes): Promise<Bytes> {\n    const msgStr = str('utf8', msg)\n    const sign = await this.getTarget().signMessage(msgStr)\n    return bytes('base64', sign).subarray(1)\n  }\n\n  getTarget(): any {\n    return (window as any).$onekey?.btc\n  }\n\n  async connect(): Promise<ThirdPartyAddress[]> {\n    let addresses: string[] = await this.getTarget().getAccounts()\n\n    if (!addresses || addresses.length === 0) {\n      await this.getTarget().requestAccounts()\n      return this.connect()\n    }\n\n    let publicKey = await this.getTarget().getPublicKey()\n\n    this.address = addresses.map((item) => new BitcoinAddress(item))\n    this.currentAddress = this.address[0]\n    this.publicKey = publicKey\n\n    return this.address\n  }\n\n  switchNetwork(): void {\n    this.getTarget().switchNetwork()\n  }\n\n  getNetwork(): string {\n    return this.getTarget().getNetwork()\n  }\n\n  getSupportNetworks(): string[] {\n    return ['livenet']\n  }\n\n  onAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().on('accountsChanged', callback)\n  }\n\n  removeAccountsChanged(callback: (account: string[]) => void): void {\n    this.getTarget().removeListener('accountsChanged', callback)\n  }\n\n  onNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().on('networkChanged', callback)\n  }\n\n  removeNetworkChanged(callback: (network: string) => void): void {\n    this.getTarget().removeListener('networkChanged', callback)\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_rooch_sdk", "import_rooch_sdk", "import_rooch_sdk", "import_rooch_sdk"]
}
