import type { ReactNode } from 'react';
import { NetworkConfigs } from './clientProvider.js';
export declare const RoochContext: import("react").Context<(Omit<import("zustand").StoreApi<import("./sessionStore.js").SessionStoreState>, "persist"> & {
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<import("./sessionStore.js").SessionStoreState, unknown>>) => void;
        clearStorage: () => void;
        rehydrate: () => void | Promise<void>;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: import("./sessionStore.js").SessionStoreState) => void) => () => void;
        onFinishHydration: (fn: (state: import("./sessionStore.js").SessionStoreState) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<import("./sessionStore.js").SessionStoreState, unknown>>;
    };
}) | null>;
export type RoochProviderProps<T extends NetworkConfigs> = {
    networks?: NetworkConfigs;
    onNetworkChange?: (network: keyof T & string) => void;
    children: ReactNode;
} & ({
    defaultNetwork?: keyof T & string;
    network?: never;
} | {
    defaultNetwork?: never;
    network?: keyof T & string;
});
export declare function RoochProvider<T extends NetworkConfigs>(props: RoochProviderProps<T>): import("react/jsx-runtime").JSX.Element;
