// src/hooks/wallet/useWalletStore.ts
import { useContext as useContext3 } from "react";
import { useStore as useStore2 } from "zustand";

// src/provider/roochProvider.tsx
import { createContext as createContext2, useRef } from "react";

// src/provider/clientProvider.tsx
import { useCallback } from "react";
import { createContext, useMemo, useState } from "react";
import {
  getRoochNodeUrl,
  isRoochClient,
  RoochClient
} from "@roochnetwork/rooch-sdk";

// src/hooks/useSessionsStore.ts
import { useContext } from "react";
import { useStore } from "zustand";

// src/http/httpTransport.ts
import {
  RoochHTTPTransport,
  ErrorValidateInvalidAccountAuthKey,
  ErrorValidateSessionIsExpired
} from "@roochnetwork/rooch-sdk";

// src/provider/clientProvider.tsx
import { jsx } from "react/jsx-runtime";
var ClientContext = createContext(null);
var DEFAULT_NETWORKS = {
  localnet: { url: getRoochNodeUrl("localnet") }
};

// src/provider/sessionStore.ts
import { createStore } from "zustand";
import { createJSONStorage, persist } from "zustand/middleware";
import { Session } from "@roochnetwork/rooch-sdk";

// src/wellet/wallet.ts
import { Signer } from "@roochnetwork/rooch-sdk";

// src/wellet/bitcoin.ts
import {
  Authenticator,
  BitcoinSignMessage,
  Secp256k1PublicKey,
  fromHEX
} from "@roochnetwork/rooch-sdk";

// src/wellet/unisat.ts
import { BitcoinAddress as BitcoinAddress2, str, bytes } from "@roochnetwork/rooch-sdk";

// src/wellet/okx.ts
import { BitcoinAddress as BitcoinAddress3, str as str2, bytes as bytes2 } from "@roochnetwork/rooch-sdk";

// src/wellet/onekey.ts
import { BitcoinAddress as BitcoinAddress4, str as str3, bytes as bytes3 } from "@roochnetwork/rooch-sdk";

// src/provider/roochProvider.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var RoochContext = createContext2(null);

// src/provider/walletProvider.tsx
import { useCallback as useCallback2, createContext as createContext3, useEffect, useRef as useRef2 } from "react";
import { BitcoinAddress as BitcoinAddress5 } from "@roochnetwork/rooch-sdk";

// src/provider/walletStore.ts
import { createStore as createStore2 } from "zustand";
import { createJSONStorage as createJSONStorage2, persist as persist2 } from "zustand/middleware";

// src/hooks/client/useRoochContext.ts
import { useContext as useContext2 } from "react";

// src/hooks/client/useRoochClientQuery.ts
import { useQuery } from "@tanstack/react-query";

// src/hooks/client/useSwitchNetwork.ts
import { useMutation } from "@tanstack/react-query";

// src/constants/roochMutationKeys.ts
function formMutationKeyFn(baseEntity) {
  return function mutationKeyFn(additionalKeys = []) {
    return [{ ...roochMutationKeys.all, baseEntity }, ...additionalKeys];
  };
}
var roochMutationKeys = {
  all: { baseScope: "rooch" },
  addNetwork: formMutationKeyFn("add-network"),
  switchNetwork: formMutationKeyFn("switch-network"),
  removeNetwork: formMutationKeyFn("remove-network"),
  removeSession: formMutationKeyFn("remove-session"),
  transferObject: formMutationKeyFn("transfer-object"),
  transferCoin: formMutationKeyFn("transfer-coin"),
  signAndExecuteTransaction: formMutationKeyFn("sign-and-execute-transaction")
};

// src/constants/walletMutationKeys.ts
function formMutationKeyFn2(baseEntity) {
  return function mutationKeyFn(additionalKeys = []) {
    return [{ ...walletMutationKeys.all, baseEntity }, ...additionalKeys];
  };
}
var walletMutationKeys = {
  all: { baseScope: "wallet" },
  connectWallet: formMutationKeyFn2("connect-wallet"),
  autoConnectWallet: formMutationKeyFn2("auto-connect-wallet"),
  switchAccount: formMutationKeyFn2("switch-account"),
  createSessionKey: formMutationKeyFn2("create-session-key")
};

// src/hooks/client/useTransferObject.ts
import { useMutation as useMutation2 } from "@tanstack/react-query";

// src/hooks/client/useTransferCoin.ts
import { useMutation as useMutation3 } from "@tanstack/react-query";

// src/hooks/client/useSignAndExecuteTransaction.ts
import { useMutation as useMutation4 } from "@tanstack/react-query";

// src/hooks/wallet/useAutoConnectWallet.ts
import { useQuery as useQuery2 } from "@tanstack/react-query";
import { useLayoutEffect, useState as useState2 } from "react";

// src/hooks/wallet/useConnectWallet.ts
import { useMutation as useMutation5 } from "@tanstack/react-query";

// src/hooks/wallet/useWalletCreateSession.ts
import { useMutation as useMutation6 } from "@tanstack/react-query";

// src/hooks/useRemoveSession.ts
import { useMutation as useMutation7 } from "@tanstack/react-query";

// src/wellet/wallets.ts
var wallets = void 0;
var registered = /* @__PURE__ */ new Set();
var listeners = {};
function getWallets() {
  if (wallets)
    return wallets;
  wallets = Object.freeze({ register, get, on });
  return wallets;
}
function register(...wallets2) {
  wallets2.forEach((wallet) => registered.add(wallet));
  listeners["register"]?.forEach((listener) => guard(() => listener(...wallets2)));
  return function unregister() {
    wallets2.forEach((wallet) => registered.delete(wallet));
    listeners["unregister"]?.forEach((listener) => guard(() => listener(...wallets2)));
  };
}
function get() {
  return [...registered];
}
function on(event, listener) {
  listeners[event]?.push(listener) || (listeners[event] = [listener]);
  return function off() {
    listeners[event] = listeners[event]?.filter((existingListener) => listener !== existingListener);
  };
}
function guard(callback) {
  try {
    callback();
  } catch (error) {
    console.error(error);
  }
}

// src/wellet/util.ts
function getRegisteredWallets(preferredWallets, walletFilter) {
  const walletsApi = getWallets();
  const wallets2 = walletsApi.get();
  const Wallets = wallets2.filter((wallet) => !walletFilter || walletFilter(wallet));
  return [
    // Preferred wallets, in order:
    ...preferredWallets.map((name) => Wallets.find((wallet) => wallet.getName() === name)),
    // Wallets in default order:
    ...Wallets.filter((wallet) => !preferredWallets.includes(wallet.getName()))
  ].filter((wallet) => wallet !== void 0);
}

// src/provider/walletProvider.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
var WalletContext = createContext3(null);

// src/hooks/wallet/useWalletStore.ts
function useWalletStore(selector) {
  const store = useContext3(WalletContext);
  if (!store) {
    throw new Error("Could not find WalletContext. Ensure that you have set up the WalletProvider.");
  }
  return useStore2(store, selector);
}

// src/hooks/wallet/useWalletChanged.ts
import { useEffect as useEffect2 } from "react";
function useWalletChanged(preferredWallets, walletFilter) {
  const updateWallets = useWalletStore((state) => state.updateWallets);
  useEffect2(() => {
    const api = getWallets();
    updateWallets(getRegisteredWallets(preferredWallets, walletFilter));
    const unsubscribeFromRegister = api.on("register", () => {
      updateWallets(getRegisteredWallets(preferredWallets, walletFilter));
    });
    return () => {
      unsubscribeFromRegister();
    };
  }, [preferredWallets, updateWallets, walletFilter]);
}
export {
  useWalletChanged
};
//# sourceMappingURL=useWalletChanged.js.map
