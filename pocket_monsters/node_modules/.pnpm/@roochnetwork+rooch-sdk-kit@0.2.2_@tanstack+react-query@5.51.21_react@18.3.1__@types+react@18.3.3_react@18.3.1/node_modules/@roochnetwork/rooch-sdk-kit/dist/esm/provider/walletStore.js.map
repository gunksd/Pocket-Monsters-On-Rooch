{
  "version": 3,
  "sources": ["../../../src/provider/walletStore.ts"],
  "sourcesContent": ["// Copyright (c) RoochNetwork\n// SPDX-License-Identifier: Apache-2.0\n\nimport { createStore } from 'zustand'\nimport { createJSONStorage, persist } from 'zustand/middleware'\nimport { StateStorage } from 'zustand/middleware'\nimport { ThirdPartyAddress } from '@roochnetwork/rooch-sdk'\n\nimport { SupportChain } from '../feature/index.js'\n\nimport { Wallet } from '../wellet/index.js'\n\ntype WalletConnectionStatus = 'disconnected' | 'connecting' | 'connected'\n\nexport type WalletActions = {\n  setChain: (chain: SupportChain) => void\n  setAddressSwitched: (selectedAccount: ThirdPartyAddress) => void\n  setConnectionStatus: (connectionStatus: WalletConnectionStatus) => void\n  setWalletConnected: (\n    wallet: Wallet,\n    connectedAddress: readonly ThirdPartyAddress[],\n    selectedAddress: ThirdPartyAddress | null,\n  ) => void\n  updateWalletAddresses: (accounts: readonly ThirdPartyAddress[]) => void\n  setWalletDisconnected: () => void\n  updateWallets: (wallets: readonly Wallet[]) => void\n}\n\nexport type WalletStore = ReturnType<typeof createWalletStore>\n\nexport type WalletStoreState = {\n  autoConnectEnabled: boolean\n  currentChain: SupportChain\n  currentWallet: Wallet | undefined\n  wallets: readonly Wallet[]\n  addresses: readonly ThirdPartyAddress[]\n  currentAddress: ThirdPartyAddress | undefined\n  lastConnectedAddress: string | undefined\n  lastConnectedWalletName: string | undefined\n  connectionStatus: WalletConnectionStatus\n} & WalletActions\n\ntype WalletConfiguration = {\n  autoConnectEnabled: boolean\n  chain: SupportChain\n  currentWallet: Wallet | undefined\n  wallets: Wallet[]\n  storage: StateStorage\n  storageKey: string\n}\n\nexport function createWalletStore({\n  chain,\n  currentWallet,\n  wallets,\n  storage,\n  storageKey,\n  autoConnectEnabled,\n}: WalletConfiguration) {\n  return createStore<WalletStoreState>()(\n    persist(\n      (set, get) => ({\n        currentChain: chain,\n        autoConnectEnabled,\n        currentWallet,\n        wallets,\n        addresses: [],\n        currentAddress: undefined,\n        lastConnectedAddress: undefined,\n        lastConnectedWalletName: undefined,\n        connectionStatus: 'disconnected',\n        setChain(chain) {\n          const currentChain = get().currentChain\n\n          if (currentChain === chain) {\n            return\n          }\n          set(() => ({\n            currentChain: chain,\n            accounts: [],\n            // currentWallet: supportWallets.find((v) => v.getSupportNetworks()),\n            sessionAccount: null,\n            connectionStatus: 'disconnected',\n          }))\n        },\n        setConnectionStatus(connectionStatus) {\n          set(() => ({\n            connectionStatus,\n          }))\n        },\n        setWalletConnected(wallet, connectedAddresses, selectedAddress) {\n          set(() => ({\n            currentWallet: wallet,\n            accounts: connectedAddresses,\n            currentAddress: selectedAddress || undefined,\n            lastConnectedWalletName: wallet.getName(),\n            lastConnectedAddress: selectedAddress?.toStr(),\n            connectionStatus: 'connected',\n          }))\n        },\n        setWalletDisconnected() {\n          set(() => ({\n            accounts: [],\n            currentAddress: undefined,\n            lastConnectedWalletName: undefined,\n            lastConnectedAddress: undefined,\n            connectionStatus: 'disconnected',\n          }))\n        },\n        setAddressSwitched(selected) {\n          set(() => ({\n            currentAddress: selected,\n            lastConnectedAddress: selected.toStr() ?? '',\n          }))\n        },\n        updateWalletAddresses(addresses) {\n          const currentAddr = get().currentAddress\n          set(() => ({\n            currentAddress:\n              (currentAddr && addresses.find((addr) => addr.toStr() === currentAddr.toStr())) ||\n              addresses[0],\n          }))\n        },\n        updateWallets(wallets) {\n          set(() => ({\n            wallets: wallets,\n          }))\n        },\n      }),\n      {\n        name: storageKey,\n        storage: createJSONStorage(() => storage),\n        partialize: ({ lastConnectedWalletName, lastConnectedAddress }) => ({\n          lastConnectedWalletName,\n          lastConnectedAddress,\n        }),\n      },\n    ),\n  )\n}\n"],
  "mappings": ";AAGA,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB,eAAe;AA+CpC,SAAS,kBAAkB;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAwB;AACtB,SAAO,YAA8B;AAAA,IACnC;AAAA,MACE,CAAC,KAAK,SAAS;AAAA,QACb,cAAc;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,QACA,WAAW,CAAC;AAAA,QACZ,gBAAgB;AAAA,QAChB,sBAAsB;AAAA,QACtB,yBAAyB;AAAA,QACzB,kBAAkB;AAAA,QAClB,SAASA,QAAO;AACd,gBAAM,eAAe,IAAI,EAAE;AAE3B,cAAI,iBAAiBA,QAAO;AAC1B;AAAA,UACF;AACA,cAAI,OAAO;AAAA,YACT,cAAcA;AAAA,YACd,UAAU,CAAC;AAAA;AAAA,YAEX,gBAAgB;AAAA,YAChB,kBAAkB;AAAA,UACpB,EAAE;AAAA,QACJ;AAAA,QACA,oBAAoB,kBAAkB;AACpC,cAAI,OAAO;AAAA,YACT;AAAA,UACF,EAAE;AAAA,QACJ;AAAA,QACA,mBAAmB,QAAQ,oBAAoB,iBAAiB;AAC9D,cAAI,OAAO;AAAA,YACT,eAAe;AAAA,YACf,UAAU;AAAA,YACV,gBAAgB,mBAAmB;AAAA,YACnC,yBAAyB,OAAO,QAAQ;AAAA,YACxC,sBAAsB,iBAAiB,MAAM;AAAA,YAC7C,kBAAkB;AAAA,UACpB,EAAE;AAAA,QACJ;AAAA,QACA,wBAAwB;AACtB,cAAI,OAAO;AAAA,YACT,UAAU,CAAC;AAAA,YACX,gBAAgB;AAAA,YAChB,yBAAyB;AAAA,YACzB,sBAAsB;AAAA,YACtB,kBAAkB;AAAA,UACpB,EAAE;AAAA,QACJ;AAAA,QACA,mBAAmB,UAAU;AAC3B,cAAI,OAAO;AAAA,YACT,gBAAgB;AAAA,YAChB,sBAAsB,SAAS,MAAM,KAAK;AAAA,UAC5C,EAAE;AAAA,QACJ;AAAA,QACA,sBAAsB,WAAW;AAC/B,gBAAM,cAAc,IAAI,EAAE;AAC1B,cAAI,OAAO;AAAA,YACT,gBACG,eAAe,UAAU,KAAK,CAAC,SAAS,KAAK,MAAM,MAAM,YAAY,MAAM,CAAC,KAC7E,UAAU,CAAC;AAAA,UACf,EAAE;AAAA,QACJ;AAAA,QACA,cAAcC,UAAS;AACrB,cAAI,OAAO;AAAA,YACT,SAASA;AAAA,UACX,EAAE;AAAA,QACJ;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,kBAAkB,MAAM,OAAO;AAAA,QACxC,YAAY,CAAC,EAAE,yBAAyB,qBAAqB,OAAO;AAAA,UAClE;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;",
  "names": ["chain", "wallets"]
}
