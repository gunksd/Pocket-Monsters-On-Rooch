import { StateStorage } from 'zustand/middleware';
import { Session } from '@roochnetwork/rooch-sdk';
export type SessionActions = {
    addSession: (session: Session) => void;
    setCurrentSession: (session?: Session) => void;
    removeSession: (session: Session) => void;
};
export type SessionStoreState = {
    sessions: Session[];
    currentSession: Session | null;
} & SessionActions;
export type SessionStore = ReturnType<typeof createSessionStore>;
type ClientConfiguration = {
    storage: StateStorage;
    storageKey: string;
};
export declare function createSessionStore({ storage, storageKey }: ClientConfiguration): Omit<import("zustand").StoreApi<SessionStoreState>, "persist"> & {
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<SessionStoreState, unknown>>) => void;
        clearStorage: () => void;
        rehydrate: () => void | Promise<void>;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: SessionStoreState) => void) => () => void;
        onFinishHydration: (fn: (state: SessionStoreState) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<SessionStoreState, unknown>>;
    };
};
export {};
